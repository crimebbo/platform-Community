package com.osci.kr.itda.common.schedule;import com.osci.kr.itda.entity.Member;import com.osci.kr.itda.entity.Mileage;import com.osci.kr.itda.entity.Noti;import com.osci.kr.itda.repo.MembersRepo;import com.osci.kr.itda.repo.MileageRepo;import com.osci.kr.itda.service.NotiService;import com.osci.kr.itda.serviceimpl.NotiServiceImpl;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.LocalTime;import java.util.List;import java.util.Optional;import java.util.concurrent.atomic.AtomicInteger;@Componentpublic class mileageScheduleTask {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MembersRepo membersRepo;    @Autowired    private NotiServiceImpl notiService;    @Autowired    private MileageRepo mileageRepo;    @Scheduled(cron = "0 0 11 * * *")    public void calcPointTask() throws Exception{        logger.info("calcPointTask Start ");        LocalDateTime startDatetime = LocalDateTime.of(LocalDate.now().minusDays(1), LocalTime.of(0,0,0)); //어제 00:00:00        LocalDateTime endDatetime = LocalDateTime.of(LocalDate.now(), LocalTime.of(23,59,59)); //        AtomicInteger plusPoint = new AtomicInteger();        AtomicInteger minusPoint = new AtomicInteger();         membersRepo.findAll().forEach(member -> {             mileageRepo.findByUseridAndRegDateTimeBetween(member.getUserid(),startDatetime,endDatetime).forEach(mileage -> {                 if(mileage.getPoint() > 0){                     plusPoint.addAndGet(mileage.getPoint());                 }else{                     minusPoint.addAndGet(Math.abs(mileage.getPoint()));                 }             });             int cnt = Integer.parseInt(String.valueOf(plusPoint)) - Integer.parseInt(String.valueOf(minusPoint));             try {                 Noti noti = new Noti();                 noti.setUserid(member.getUserid());                 noti.setTargetUserid("admin");                 noti.setNotiType("point");                 noti.setNotiMessage("오늘 마일리지가 " + cnt + " 적립되었습니다.");                 notiService.sendNoti(noti);             }catch (Exception ex){                 ex.getMessage();             }        });        logger.info("calcPointTask End");    }}