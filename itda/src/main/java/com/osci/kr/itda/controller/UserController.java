package com.osci.kr.itda.controller;import com.osci.kr.itda.common.controller.ItDaBaseController;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.Member;import com.osci.kr.itda.serviceimpl.UserServiceImpl;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.io.IOException;import java.net.URISyntaxException;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@CrossOrigin(origins = "*" ,allowedHeaders = "*")@RestController@RequestMapping("/rest/api/v1/member")public class UserController extends ItDaBaseController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private UserServiceImpl userService;    @Autowired    private HttpServletRequest req;    /**     * 회원가입     * @param member     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/signUp", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> signUp(@Valid @RequestBody Member member) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            userService.signUpUser(member,req);            member.add(linkTo(UserController.class).withSelfRel());            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg(getErrorMsg(e.getMessage()));            result.setErrorCode(e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 유저 정보 조회     * @param userid     * @return     * @throws ItDaExceptionHandler     * @throws IOException     * @throws URISyntaxException     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/getUserInfo/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> getUserInfo(@PathVariable(value = "userid") String userid ) throws ItDaExceptionHandler, IOException, URISyntaxException {        ItDaResult result = new ItDaResult();        HttpHeaders httpHeaders = new HttpHeaders();        try{            result = userService.getUserInfo(userid);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("getUserInfo ==== " + e.getMessage());        }        return new ResponseEntity<>(result, HttpStatus.OK);    }    /**     * 마이 정보 조회     * @param userid     * @return     * @throws ItDaExceptionHandler     * @throws IOException     * @throws URISyntaxException     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/getUserSummury/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> getUserSummury(@PathVariable(value = "userid") String userid ) throws ItDaExceptionHandler, IOException, URISyntaxException {        ItDaResult result = new ItDaResult();        HttpHeaders httpHeaders = new HttpHeaders();        try{            result = userService.getUserSummury(userid);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("getUserInfo ==== " + e.getMessage());        }        return new ResponseEntity<>(result, HttpStatus.OK);    }    /**     * 유저 프로필 파일 업로드     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/profile/upload/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> fileupload(@RequestParam("file") MultipartFile multipartFile,                                                  @PathVariable(value = "userid") String userid,                                                  HttpServletRequest req ,HttpServletResponse res ) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = userService.fileupload(multipartFile,userid,req,res);            result.setResultCode(200);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    private String getErrorMsg(String msg){        if(msg.equals("userid")){            return "이미 존재하는 아이디 입니다.";        }        if(msg.equals("email")){            return "이미 등록된 이메일 정보입니다.";        }        if(msg.equals("nickname")){            return "이미 존재하는 닉네임입니다.";        }        return "fail";    }}