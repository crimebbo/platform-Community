package com.osci.kr.itda.controller;import com.osci.kr.itda.common.controller.ItDaBaseController;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.Board;import com.osci.kr.itda.entity.FileUpload;import com.osci.kr.itda.repo.FileUploadRepo;import com.osci.kr.itda.serviceimpl.BoardServiceImpl;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.InputStreamResource;import org.springframework.core.io.UrlResource;import org.springframework.core.io.support.ResourceRegion;import org.springframework.http.*;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.Collections;import java.util.List;import java.util.Optional;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@CrossOrigin(origins = "*" ,allowedHeaders = "*")@RestController@RequestMapping("/rest/api/v1/board")public class BoardController extends ItDaBaseController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private BoardServiceImpl boardService;    @Autowired    private HttpServletRequest req;    @Autowired    private FileUploadRepo fileUploadRepo;    /**     * 게시글 작성     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/write", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> write(@Valid @RequestBody Board board,                                             HttpServletRequest req  , HttpServletResponse res) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.write(board,req,res);            board.add(linkTo(UserController.class).withSelfRel());            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 게시글 리스트 조회     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/selectList/{page}/{size}/{regType}/{userid}/{flag}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> selectList(@PathVariable(value = "regType") String regType,                                                  @PathVariable(value = "page") int page,                                                  @PathVariable(value = "size") int size,                                                  @PathVariable(value = "userid") String userid,                                                  @PathVariable(value = "flag") String flag) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.selectList(page,size,regType,userid,flag);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 게시글 단건 조회     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/selectOne/{userid}/{num}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> selectOne(@PathVariable(value = "userid") String userid,                                                 @PathVariable(value = "num") int num) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result =boardService.selectBdOne(userid,num);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 게시글 수정     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/modify", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> modify(@Valid @RequestBody Board board,                                                 HttpServletRequest req  , HttpServletResponse res) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result =boardService.modify(board,req,res);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 게시글 삭제     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @DeleteMapping(value = "/delete/{userid}/{num}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> delete(@PathVariable(value = "userid") String userid,                                              @PathVariable(value = "num") int num) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            boardService.delete(userid,num);            result.setResultCode(200);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 파일 업로드     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/file/upload/{num}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> fileupload(@RequestParam("file") MultipartFile multipartFile,                                                  @PathVariable(value = "num") Long num,                                                  HttpServletRequest req ,HttpServletResponse res ) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.fileupload(multipartFile,num,req,res);            result.setResultCode(200);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 첨부파일 삭제     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @DeleteMapping(value = "/file/remove/{fileid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> fileupload(@PathVariable(value = "fileid") Long fileid,                                                  HttpServletRequest req ,HttpServletResponse res ) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            boardService.fileRemove(fileid,req,res);            result.setResultCode(200);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 첨부파일 다운로드     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/file/download/{fileid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<InputStreamResource> downloadFile(@PathVariable(value = "fileid") Long fileid,                                                            HttpServletRequest req , HttpServletResponse res) throws FileNotFoundException,ItDaExceptionHandler {        Optional<FileUpload> downFile = fileUploadRepo.findById(fileid);        FileUpload fileInfo= downFile.get();        File file = new File(fileInfo.getFilePath());        String filename = fileInfo.getOriginname();        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));        HttpHeaders header = new HttpHeaders();        header.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename="+filename);        header.add("Cache-Control", "no-cache, no-store, must-revalidate");        header.add("Pragma", "no-cache");        header.add("Expires", "0");        return ResponseEntity.ok()                .headers(header)                .contentLength(file.length())                .contentType(MediaType.parseMediaType("application/octet-stream"))                .body(resource);    }    /**     * 동영상 파일 스트리밍     * @param fileid     * @param headers     * @return     * @throws IOException     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/file/video/{fileid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ResourceRegion> getVideo(@PathVariable Long fileid, @RequestHeader HttpHeaders headers) throws IOException {        logger.info("getVideo");        Optional<FileUpload> downFile = fileUploadRepo.findById(fileid);        FileUpload fileInfo= downFile.get();        UrlResource video = new UrlResource("classpath:/static/KakaoTalk_Video_2021-02-10-10-55-07.mp4");        List<HttpRange> range = Collections.singletonList(HttpRange.createByteRange(0, 1000000000));        headers.setRange(range);        ResourceRegion region = resourceRegion(video, headers);        return ResponseEntity.status(HttpStatus.PARTIAL_CONTENT)                .contentType(MediaTypeFactory.getMediaType(video)                 .orElse(MediaType.APPLICATION_OCTET_STREAM))                .body(region);    }    /**     * 좋아요     * @param num     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/like/{num}/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> like(@PathVariable(value = "num") Long num,                                            @PathVariable(value = "userid") String userid) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.likeConut(num,userid);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * unlike     * @param num     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/unlike/{num}/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> unlike(@PathVariable(value = "num") Long num,                                              @PathVariable(value = "userid") String userid) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.unlikeCount(num,userid);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * sortList     * @param type int page , int size     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/sortSelectList/{sortType}/{regType}/{page}/{size}/{userid}/{flagType}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> sortList(@PathVariable(value = "sortType") String sortType,                                                @PathVariable(value = "regType") String regType,                                                @PathVariable(value = "page") int page,                                                @PathVariable(value = "size") int size,                                                @PathVariable(value = "userid") String userid,                                                @PathVariable(value = "flagType") String flagType) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.sortList(sortType,regType,page,size,userid,flagType);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * sortReplySelectList     * @param type int page , int size     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/sortReplySelectList/{sortType}/{regType}/{page}/{size}/{userid}/{flagType}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> sortReplySelectList(@PathVariable(value = "sortType") String sortType,                                                @PathVariable(value = "regType") String regType,                                                @PathVariable(value = "page") int page,                                                @PathVariable(value = "size") int size,                                                @PathVariable(value = "userid") String userid,                                                @PathVariable(value = "flagType") String flagType) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = boardService.sortReplySelectList(sortType,regType,page,size,userid,flagType);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    private ResourceRegion resourceRegion(UrlResource video, HttpHeaders headers) throws IOException {        final long chunkSize = 1000000L;        long contentLength = video.contentLength();        HttpRange httpRange = headers.getRange().stream().findFirst().get();        if(httpRange != null) {            long start = httpRange.getRangeStart(contentLength);            long end = httpRange.getRangeEnd(contentLength);            long rangeLength = Long.min(chunkSize, end - start + 1);            return new ResourceRegion(video, start, rangeLength);        } else {            long rangeLength = Long.min(chunkSize, contentLength);            return new ResourceRegion(video, 0, rangeLength);        }    }    /**     * scrap     * @param boardnum     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/scrap/{boardnum}/{userid}/{url}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> scrap(@PathVariable(value = "boardnum") Long boardnum,                                             @PathVariable(value = "userid") String userid,                                              @PathVariable(value = "url") String url) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            boardService.scrap(boardnum,userid,url);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * tagSearch     * @param tagnm     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/tagSearch/{tagnm}", produces = { MediaType.APPLICATION_JSON_VALUE })    public  ResponseEntity<ItDaResult> tagSearch(@PathVariable(value = "tagnm") String tagnm) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result =boardService.tagSearch(tagnm);            result.setResultCode(201);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }}