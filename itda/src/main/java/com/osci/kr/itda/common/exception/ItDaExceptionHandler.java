package com.osci.kr.itda.common.exception;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.web.HttpRequestMethodNotSupportedException;import org.springframework.web.bind.MissingServletRequestParameterException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;import javax.servlet.http.HttpServletRequest;import java.util.HashMap;import java.util.Properties;@ControllerAdvicepublic class ItDaExceptionHandler extends Throwable {    protected Logger logger = LogManager.getLogger(this.getClass());    /**     * httpRequestMethodNotSupportedExceptionHandler     * @param req     * @param e     */    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)    @ResponseStatus(value = HttpStatus.METHOD_NOT_ALLOWED)    public void httpRequestMethodNotSupportedExceptionHandler(HttpServletRequest req, Exception e){        logger.error("******************* Error *******************");        if(e.getCause() != null) {            logger.error("Error Message >> " + e.getCause().getMessage());        } else {            logger.error("Error Message >> " + e.getMessage());        }        e.printStackTrace();        logger.error("**********************************************");    }    /**     * requestParameterExceptionHandler     * @param req     * @param e     */    @ExceptionHandler(MissingServletRequestParameterException.class)    @ResponseStatus(value = HttpStatus.BAD_REQUEST)    public void requestParameterExceptionHandler(HttpServletRequest req, Exception e){        logger.error("******************* Error *******************");        if(e.getCause() != null) {            logger.error("Error Message >> " + e.getCause().getMessage());        } else {            logger.error("Error Message >> " + e.getMessage());        }        e.printStackTrace();        logger.error("**********************************************");    }    /**     * requestParameterExceptionHandler     * @param req     * @param e     */    @ExceptionHandler(MethodArgumentTypeMismatchException.class)    @ResponseStatus(value = HttpStatus.BAD_REQUEST)    public void typeMismatchException(HttpServletRequest req, Exception e){        logger.error("******************* Error *******************");        if(e.getCause() != null) {            logger.error("Error Message >> " + e.getCause().getMessage());        } else {            logger.error("Error Message >> " + e.getMessage());        }        e.printStackTrace();        logger.error("**********************************************");    }    /**     * defaultErrorHandler     * @param req     * @param e     */    @ExceptionHandler(Exception.class)    @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)    public void defaultErrorHandler(HttpServletRequest req, Exception e){        if(!e.getClass().getName().equals("org.apache.catalina.connector.ClientAbortException")){            logger.error("******************* Error *******************");            if(e.getCause() != null) {                logger.error("Error Message >> " + e.getCause().getMessage());            } else {                logger.error("Error Message >> " + e.getMessage());            }            e.printStackTrace();            logger.error("**********************************************");        }    }}