package com.osci.kr.itda.entity;import com.fasterxml.jackson.annotation.JsonCreator;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.AccessLevel;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import org.hibernate.annotations.CreationTimestamp;import org.hibernate.annotations.UpdateTimestamp;import org.springframework.hateoas.RepresentationModel;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import javax.persistence.*;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.UUID;import java.util.stream.Collectors;/** * 회원 테이블 */@Data@NoArgsConstructor(access = AccessLevel.PUBLIC)@Entity(name="tbl_member")@Table(indexes = {@Index(columnList="userid"), @Index(columnList="email") , @Index(columnList="nickname")})public class Member extends RepresentationModel<Member> implements UserDetails {    @Id    @GeneratedValue(strategy= GenerationType.IDENTITY)    @Column(length = 11, nullable = false)    private Long id;    @Column(length = 100, nullable = false, unique=true)    private String userid;    @Column(length = 255, nullable = true )    private String email;    @Column(length = 255, nullable = true)    private String password;    @Column(length = 255, nullable = false, unique=true)    private String nickname;    @Column(length = 11, nullable = true)    private int point;    @Column(length = 6, nullable = true)    private int level;    @Column(length = 255, nullable = true)    private String phone;    @Column(length = 4, nullable = true)    private int sex;    @Column(length = 7, nullable = true)    private String zipcode;    @Column(length = 255, nullable = true)    private String address1;    @Column(length = 255, nullable = true)    private String address2;    @Column(length = 255, nullable = true)    private String address3;    @Column(length = 4, nullable = true)    private int denied;    @Column(length = 50, nullable = true)    private String registerIp;    @CreationTimestamp    private LocalDateTime lastlogin;    @Column(length = 50, nullable = true)    private String lastloginIp;    @Column(columnDefinition = "TEXT")    private String profileContent;    @Column(length = 255, nullable = true)    private String icon;    @Column(length = 255, nullable = true)    private String photo;    @Column(length = 2, nullable = true)    private String ynAgree;    @Column(length = 100, nullable = true)    private String timezone;    @Column(columnDefinition = "TEXT",nullable = true)    private String interests;    @Column(length = 100, nullable = true)    private boolean active;    @Column(length = 10, nullable = true)    private String ynJoin;    @CreationTimestamp    private LocalDateTime registerdatetime;    @UpdateTimestamp    private LocalDateTime registerUpdatetime;    @Column(columnDefinition = "TEXT",nullable = true)    private String jwtToken;    @Column(name="roles")    @ElementCollection(targetClass=String.class,fetch = FetchType.EAGER)    private List<String> roles;    //이메일 인증 여부 확인    @Column(length = 2, nullable = true)    private String emailVerified;    //이메일 토큰    @Column(columnDefinition = "TEXT",nullable = true)    private String emailCheckToken;    //이메일 토큰    @Column(length = 100, nullable = true)    private String snsType;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return this.roles.stream()                .map(SimpleGrantedAuthority::new)                .collect(Collectors.toList());    }    @Override    public String getUsername() {        return email;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }    @Builder    @JsonCreator    public Member(@JsonProperty("id") Long mem_id, @JsonProperty("userid") String mem_userid,                  @JsonProperty("email") String mem_email, @JsonProperty("password") String mem_password,                  @JsonProperty("roles") List<String> roles ,@JsonProperty("token") String token,                  @JsonProperty("registerIp") String registerIp ,@JsonProperty("interests") String interests ,                  @JsonProperty("ynAgree") String ynAgree  , @JsonProperty("emailCheckToken") String emailCheckToken,                  @JsonProperty("emailVerified") String emailVerified, @JsonProperty("snsType") String snsType,@JsonProperty("point") int point,                  @JsonProperty("nickname") String nickname ,@JsonProperty("photo") String photo,@JsonProperty("ynJoin") String ynJoin) {        this.id = mem_id;        this.userid = mem_userid;        this.email = mem_email;        this.password = mem_password;        this.timezone ="Asia/Seoul";        this.active = true;        this.roles = roles;        this.jwtToken = token;        this.registerIp = registerIp;        this.ynAgree = ynAgree;        this.interests = interests;        this.emailCheckToken = emailCheckToken;        this.emailVerified = emailVerified;        this.snsType = snsType;        this.nickname = nickname;        this.photo = photo;        this.ynJoin = "Y";        this.point = point;    }}