package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.ItdaApplication;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.domain.Role;import com.osci.kr.itda.entity.*;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.BoardService;import com.sun.org.apache.xpath.internal.operations.Bool;import lombok.AllArgsConstructor;import org.apache.commons.io.FileUtils;import org.apache.commons.io.FilenameUtils;import org.elasticsearch.action.index.IndexRequest;import org.elasticsearch.action.search.SearchRequest;import org.elasticsearch.action.search.SearchResponse;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.index.query.MatchQueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.index.search.MultiMatchQuery;import org.elasticsearch.search.builder.SearchSourceBuilder;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import javax.mail.Multipart;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.time.LocalDateTime;import java.util.*;import java.util.stream.Stream;@Service@Transactional@AllArgsConstructorpublic class BoardServiceImpl implements BoardService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MembersRepo membersRepo;    @Autowired    private BoardRepo boardRepo;    @Autowired    private FileUploadRepo fileUploadRepo;    @Autowired    private BoardCommentRepo boardCommentRepo;    @Autowired    private CommentFileuploadReop commentFileuploadReop;    @Autowired    private LikeMngRepo likeMngRepo;    @Autowired    private CommunityRepo communityRepo;    @Autowired    private ScrapRepo scrapRepo;    @Autowired    private InterestRopo interestRopo;    @Autowired    private KeywordSearchRepo keywordSearchRepo;    @Autowired    private CommunityListRepo communityListRepo;    @Autowired    private NotiServiceImpl notiService;    @Autowired    private MileageRepo mileageRepo;//    @Value("${spring.file.path}")//    private final String filepath;    /**     * 게시글 작성     * @param board     * @param req     * @param res     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult write(Board board, HttpServletRequest req, HttpServletResponse res) throws ItDaExceptionHandler, Exception {        return saveBoard(board, req, res);        //return selectListAll(0,10,board.getRegtype());    }    /**     * 게시물 리스트 조회 페이징 처리     * @param page     * @param size     * @param regType     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectList(int page,int size ,String regType,String userid,String flag) throws ItDaExceptionHandler, Exception{        return selectListAll(page,size,regType,userid,flag);    }    /**     * 게시물 단건 조회     * @param userid     * @param num     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectBdOne(String userid,int num) throws ItDaExceptionHandler, Exception{        return selectOneBoard(userid,num);    }    /**     * 게시글 수정     * @param board     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult modify(Board board, HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{        boardModify(board,req,res);        return selectOneBoard(board.getUserid(),Long.valueOf(board.getNum()).intValue());    }    /**     * 게시글 삭제     * @param userid     * @param num     * @throws ItDaExceptionHandler     * @throws Exception     */    public void delete(String userid ,int num) throws ItDaExceptionHandler, Exception{        boardDelete(userid, (long) num);    }    /**     *  파일업로드     * @param file     * @param num     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult fileupload(MultipartFile file , Long num , HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{        return uploaded(file, (long) num , req , res);    }    /**     * 파일 삭제     * @param fileid     * @param req     * @param res     * @throws ItDaExceptionHandler     * @throws Exception     */    public void fileRemove(Long fileid ,HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{         removeFile(fileid);    }    /**     * 좋아요     * @param num     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult likeConut(Long num,String userid) throws ItDaExceptionHandler, Exception{        return like(num,userid);    }    /**     * unlikeCount     * @param num     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult unlikeCount(Long num,String userid) throws ItDaExceptionHandler, Exception{        return unlike(num,userid);    }    /**     * sortList     * @param regType     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult sortList(String sortType , String regType , int page, int size,String userid,String flagType) throws ItDaExceptionHandler, Exception{        return sortBoardList(sortType, regType, page , size,userid,flagType);    }    /**     * sortList     * @param regType     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult sortReplySelectList(String sortType , String regType , int page, int size,String userid,String flag) throws ItDaExceptionHandler, Exception{        return sortReplyList(sortType, regType, page , size,userid,flag);    }    /**     * scrap     * @param num     * @throws ItDaExceptionHandler     * @throws Exception     */    public void scrap(Long num , String userid , String url) throws ItDaExceptionHandler, Exception{         makeScrap(num, userid, url);    }    /**     * 태그검색     * @param tagnm     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult tagSearch(String tagnm) throws ItDaExceptionHandler, Exception{        return findTag(tagnm);    }    private ItDaResult findTag(String tag) throws ItDaExceptionHandler ,Exception{        ItDaResult result = new ItDaResult();        List<CommunityList> com =  communityListRepo.findByComNmLike("%" + tag + "%");        result.setResultData(com.size() == 0 ? null : com);        return result;    }    private void makeScrap(Long boardnum , String userid , String url)throws Exception{        if(!scrapRepo.findByUseridAndBoardNum(userid,boardnum).equals(Optional.empty())){            throw new IllegalArgumentException("Exist");        }        Scrap sc = Scrap.builder()                .userid(userid)                .boardNum(boardnum)                .scrUrl(url)                .scrYn("Y")                .build();        scrapRepo.save(sc);    }    private ItDaResult sortReplyList(String sortType,String regType , int page, int size,String userid,String flagtype) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        //String sortColum = sortType.equals("0") ? "commentCount" : "num";        if(flagtype.equals("all")){            flagtype = "0,1,2,3,4,5";        }        List<String> flagTypes = Arrays.asList(flagtype.split(","));        Pageable pageable = PageRequest.of(page, size, sortType.equals("0") ? Sort.Direction.DESC : Sort.Direction.ASC, "commentCount");        Page<Board> result = boardRepo.findByRegtypeAndYnDelAndFlagIn(regType,"N",flagTypes, pageable);        System.out.println("PAGE_SIZE: " + result.getSize());        System.out.println("TOTAL_PAGE: " + result.getTotalPages());        System.out.println("TOTAL_COUNT: " + result.getTotalElements());        System.out.println("NEXT: " + result.nextPageable());        List<Board> list = result.getContent();        if(!userid.equals("undefined")) {            list.forEach(board -> {                Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(board.getNum(), 0, userid);                Boolean ishit = lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();                board.setStatelike(ishit);            });        }        HashMap pageMap = new HashMap();        pageMap.put("list",list);        pageMap.put("PAGE_SIZE",result.getSize());        pageMap.put("TOTAL_PAGE",result.getTotalPages());        pageMap.put("TOTAL_COUNT",result.getTotalElements());        pageMap.put("NEXT",result.nextPageable());        res.setResultData(pageMap);        return  res;    }    private ItDaResult sortBoardList(String sortType,String regType , int page, int size,String userid ,String flagType) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        if(flagType.equals("all")){            flagType = "0,1,2,3,4,5";        }        List<String> flagTypes = Arrays.asList(flagType.split(","));        String sortColum = sortType.equals("0") ? "likeCount" : "num";        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, sortColum);        Page<Board> result = boardRepo.findByRegtypeAndYnDelAndFlagIn(regType,"N", flagTypes,pageable);        logger.info("PAGE_SIZE: " + result.getSize());        logger.info("TOTAL_PAGE: " + result.getTotalPages());        logger.info("TOTAL_COUNT: " + result.getTotalElements());        logger.info("NEXT: " + result.nextPageable());        List<Board> list = result.getContent();        if(!userid.equals("undefined")){            list.forEach(board-> {                Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(board.getNum(),0,userid);                Boolean ishit  =lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();                board.setStatelike(ishit);            });        }        HashMap pageMap = new HashMap();        pageMap.put("list",list);        pageMap.put("PAGE_SIZE",result.getSize());        pageMap.put("TOTAL_PAGE",result.getTotalPages());        pageMap.put("TOTAL_COUNT",result.getTotalElements());        pageMap.put("NEXT",result.nextPageable());        res.setResultData(pageMap);        return  res;    }    private ItDaResult unlike(Long num,String userid) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        if(boardRepo.findByNum(num).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<Board> e = boardRepo.findByNum(num);        Board entity = e.get();        int unlikeCnt = entity.getLikeCount() - 1;        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setLikeCount(unlikeCnt);            e.get().setStatelike(false);            e.get().setRegUpdateTime(currentDateTime);            boardRepo.save(entity);        }        Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(num,0,userid);        LikeMng lmEntity = lm.get();        if (e.isPresent()) {            lm.get().setIslikehit(false);            likeMngRepo.save(lmEntity);        }        HashMap map = new HashMap();        map.put("likeCount",unlikeCnt);        map.put("num",entity.getNum());        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.undoLikeBoard;            Optional<Member> member = membersRepo.findByUserid(userid);            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(es.getUserid())                    .mlgCode("C1")                    .mlgType("게시글 Like Undo")                    .mlgRefer(entity.getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        res.setResultData(map);        return res;    }    private ItDaResult like(Long num,String userid) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        if(boardRepo.findByNum(num).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<Board> e = boardRepo.findByNum(num);        Board entity = e.get();        int likeCnt = entity.getLikeCount() + 1;        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setLikeCount(likeCnt);            e.get().setRegUpdateTime(currentDateTime);            e.get().setStatelike(true);            boardRepo.save(entity);        }        if(likeMngRepo.findByNumOrcmtidAndTypeAndUserid(num,0,userid).equals(Optional.empty())){            LikeMng like = LikeMng.builder()                    .userid(userid)                    .type(0)                    .numOrcmtid(num)                    .islikehit(true)                    .build();            likeMngRepo.save(like);        }else{            Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(num,0,userid);            LikeMng lmEntity = lm.get();            if (e.isPresent()) {                lm.get().setIslikehit(true);                likeMngRepo.save(lmEntity);            }        }        HashMap map = new HashMap();        map.put("likeCount",likeCnt);        map.put("num",entity.getNum());        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.likeBoard;            Optional<Member> member = membersRepo.findByUserid(userid);            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(es.getUserid())                    .mlgCode("C0")                    .mlgType("게시글 Like")                    .mlgRefer(entity.getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        res.setResultData(map);        return res;    }    private void removeFile(Long fileid) throws Exception{        Optional<FileUpload> file = fileUploadRepo.findById(fileid);        FileUpload f = file.get();        File deletFiles = new File(f.getFilePath());        if(deletFiles.exists()){            deletFiles.delete();            fileUploadRepo.deleteById(fileid);        }    }    private ItDaResult uploaded(MultipartFile file , Long num , HttpServletRequest req , HttpServletResponse res) throws Exception {        logger.info("### upload");        ItDaResult ressult = new ItDaResult();        Calendar cal = Calendar.getInstance();        String dateString = String.format("%04d-%02d-%02d", cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH));        Optional<Board> bd = boardRepo.findByNum(num);        Board entity = bd.get();        String extension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());        UUID uuid = UUID.randomUUID();        String newFileName = uuid.toString() + extension;        File targetFile = new File("/Users/jhpark/" + dateString + "/" + num + "/" + entity.getUserid() + "/" + newFileName);        try {            InputStream fileStream = file.getInputStream();            FileUtils.copyInputStreamToFile(fileStream, targetFile);            file.transferTo(targetFile);            ressult.setResultData(saveFile(file ,num ,req ,entity, targetFile.getAbsolutePath().toString() , newFileName));        } catch (IOException e) {            FileUtils.deleteQuietly(targetFile);            e.printStackTrace();        }        return ressult;    }    private FileUpload saveFile(MultipartFile file , Long num, HttpServletRequest req,Board entity , String path,String newFileName) throws Exception {        LocalDateTime currentDateTime = LocalDateTime.now();        FileUpload upload = FileUpload.builder()                .filename(newFileName)                .originname(file.getOriginalFilename())                .ext(FilenameUtils.getExtension(file.getOriginalFilename()))                .filesize(file.getSize())                .num(num)                .regdateTime(currentDateTime)                .memid(entity.getMemid())                .regiIp(req.getRemoteAddr())                .userid(entity.getUserid())                .title(entity.getTitle())                .filePath(path)                .build();        fileUploadRepo.save(upload);        return upload;    }    private void boardDelete(String userid,Long num) throws Exception{        if(boardRepo.findByNum(num).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<Board> e = boardRepo.findByNum(num);        Board entity = e.get();        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setYnDel("Y");            e.get().setRegUpdateTime(currentDateTime);            boardRepo.save(entity);        }       boardCommentRepo.findByBoardnum(num).forEach(comment -> {          Optional<BoardComment> bc = boardCommentRepo.findByCmtid(comment.getCmtid());          if(bc.isPresent()){              bc.get().setYnDel("Y");              boardCommentRepo.save(bc.get());          }       });        /**         * 마일리지         */        com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.delBoard;        Optional<Member> member = membersRepo.findByUserid(userid);        Member mems = member.get();        int point  = mems.getPoint() +   mileag.getValue();        if(member.isPresent()){            member.get().setPoint(point);            member.get().setRegisterUpdatetime(currentDateTime);            membersRepo.save(mems);        }        Mileage mlg = Mileage.builder()                .userid(entity.getUserid())                .mlgCode("A1")                .mlgType("게시글 삭제")                .mlgRefer(entity.getTitle())                .point(mileag.getValue())                .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                .regDateTime(currentDateTime)                .build();        mileageRepo.save(mlg);    }    private void boardModify(Board bd ,HttpServletRequest req, HttpServletResponse res ) throws Exception{        if(boardRepo.findByNum(Long.valueOf(bd.getNum())).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<Board> e = boardRepo.findByNum(bd.getNum());        Board entity = e.get();        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setTitle(bd.getTitle());            e.get().setFlag(bd.getFlag());            e.get().setContent(bd.getContent());            e.get().setTag(bd.getTag());            e.get().setFileCount(bd.getFileCount());            e.get().setRegUpdateTime(currentDateTime);            e.get().setReply(bd.getReply());            e.get().setYnFix(bd.getYnFix());            e.get().setEventStDate(bd.getEventStDate());            e.get().setEventEdDate(bd.getEventEdDate());            boardRepo.save(entity);        }        SaveCommunity(bd.getTag(),entity.getNum());    }    private ItDaResult saveBoard(Board bd ,HttpServletRequest req, HttpServletResponse res ) throws Exception{        ItDaResult result = new ItDaResult();        LocalDateTime currentDateTime = LocalDateTime.now();        /**         * 마일리지 적립         *         *///        Optional<Mileage> emilg =  mileageRepo.findByUserid(bd.getUserid());//        Mileage m = emilg.get();        com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.regBoard;        Optional<Member> member = membersRepo.findByUserid(bd.getUserid());        Member e = member.get();        int point  = e.getPoint() +   mileag.getValue();        if(member.isPresent()){            member.get().setPoint(point);            member.get().setRegisterUpdatetime(currentDateTime);            membersRepo.save(e);        }        Mileage mlg = Mileage.builder()                .userid(bd.getUserid())                .mlgCode("A0")                .mlgType("게시글 작성")                .mlgRefer(bd.getTitle())                .point(mileag.getValue())                .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                .regDateTime(currentDateTime)                .build();        mileageRepo.save(mlg);        /**         * 게시글 작성         */        Board board = Board.builder()                .memid(bd.getMemid())                .title(bd.getTitle())                .flag(bd.getFlag())                .content(bd.getContent())                .tag(bd.getTag())                .userid(bd.getUserid())                .nickname(bd.getNickname())                .reguserEmail(bd.getReguserEmail())                .regdateTime(currentDateTime)                .regiIp(req.getRemoteAddr())                .fileCount(bd.getFileCount())                .regtype(bd.getRegtype())                .ynFix(bd.getYnFix())                .eventStDate(bd.getEventStDate())                .eventEdDate(bd.getEventEdDate())                .build();        boardRepo.save(board);        /**         * 커뮤니티 저장         */        SaveCommunity(bd.getTag(),board.getNum());        /**         * 알림         */        if(board.getFlag().equals("3") || board.getFlag().equals("5")){            SaveNoti(bd.getTag(),board);        }        HashMap map = new HashMap();        map.put("boardNum" , board.getNum());        map.put("userid",board.getUserid());        result.setResultData(map);        return  result;    }    private void SaveNoti(String tags,Board board) throws Exception{        tags = tags.trim();        tagStream(tags).forEach(tag -> {            if(!interestRopo.findByComNmAndComYn(tag,"Y").equals(Optional.empty())){               List<Interest> inter = interestRopo.findByComNmAndComYn(tag,"Y");               for(Interest user : inter){                   try {                       Noti noti = new Noti();                       noti.setUserid(user.getUserid());                       noti.setTargetUserid(board.getUserid());                       noti.setMoveNum(board.getNum());                       noti.setNotiType(board.getFlag().equals("3") ? "event" : "Notice");                       noti.setNotiMessage(tag);                       noti.setNotiUrl(board.getNum().toString());                       notiService.sendNoti(noti);                   }catch (Exception ex){                       ex.getMessage();                       logger.info(ex.getMessage());                   }               }            }        });    }    private void SaveCommunity(String tags,Long num) throws Exception{        tags = tags.trim();        tagStream(tags).forEach(tag -> {            if(communityRepo.findByComNmAndBoardNum(tag,num).equals(Optional.empty())){                LocalDateTime currentDateTime = LocalDateTime.now();                Community com = Community.builder()                        .boardNum(num)                        .comNm(tag)                        .regDateTime(currentDateTime)                        .boardCnt(0)                        .eventCnt(0)                        .interCnt(0)                        .build();                communityRepo.save(com);                if(communityListRepo.findByComNm(tag).equals(Optional.empty())){                    CommunityList list = CommunityList.builder()                            .comNm(tag)                            .regDateTime(currentDateTime)                            .build();                    communityListRepo.save(list);                }            }        });    }    private static Stream<String> tagStream(String tags) {        return Arrays.stream(tags.split(","));    }    public ItDaResult selectListAll(int page , int size ,String regType,String userid,String flag) throws Exception{        ItDaResult res = new ItDaResult();        if(flag.equals("all")){            flag = "0,1,2,3,4,5";        }        List<String> flagTypes = Arrays.asList(flag.split(","));        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "num");        Page<Board> result = boardRepo.findByRegtypeAndYnDelAndFlagIn(regType,"N",flagTypes, pageable);        logger.info("PAGE_SIZE: " + result.getSize());        logger.info("TOTAL_PAGE: " + result.getTotalPages());        logger.info("TOTAL_COUNT: " + result.getTotalElements());        logger.info("NEXT: " + result.nextPageable());        List<Board> list = result.getContent();        if(!userid.equals("undefined")){            list.forEach(board-> {                Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(board.getNum(),0,userid);                Boolean ishit  =lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();                board.setStatelike(ishit);            });        }        HashMap pageMap = new HashMap();        pageMap.put("list",list);        pageMap.put("PAGE_SIZE",result.getSize());        pageMap.put("TOTAL_PAGE",result.getTotalPages());        pageMap.put("TOTAL_COUNT",result.getTotalElements());        pageMap.put("NEXT",result.nextPageable());        res.setResultData(pageMap);        return res;    }    private ItDaResult selectOneBoard(String userid , int num) throws Exception{        ItDaResult res = new ItDaResult();        if(boardRepo.findByNum(Long.valueOf(num)).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        /**         * 게시판 정보         */        Optional<Board> board = boardRepo.findByNum(Long.valueOf(num));        Board e = board.get();        if(!userid.equals("undefined")){            e.setStatelike(getIsLikeState(Long.valueOf(num),0,userid));        }        List<FileUpload> boardFiles =  fileUploadRepo.findByNumAndYnDelOrderByRegdateTimeAsc(e.getNum(),"N");       // List<BoardComment> comments =  boardCommentRepo.findByBoardnumOrderByRegdateTimeAsc((long) num);        /**         * 댓글 정보         */        ArrayList<HashMap<String, String>> pList = new ArrayList<HashMap<String, String>>();        ArrayList<HashMap<String, String>> sublist = new ArrayList<HashMap<String, String>>();        boardCommentRepo.findByBoardnumAndYnDelOrderByRegdateTimeAsc((long) num, "N").forEach(bd -> {            HashMap comm = new HashMap();            HashMap parent = new HashMap();             try {                 if(bd.getReplyidx() == 0){                     parent.put("replyUserid",bd.getCmtuserid());                     parent.put("replyNickName",bd.getCmtnickname());                     parent.put("replyIdx",bd.getReplyidx().toString());                     parent.put("cmtID",bd.getCmtid().toString());                     parent.put("boardNum",bd.getBoardnum().toString());                     parent.put("reply",bd.getCmtcontent());                     parent.put("photo",bd.getPhoto());                     parent.put("likeCount",bd.getCmtlike());                     parent.put("commentFiles",getCommentFiles(bd.getCmtid(),"N"));                     parent.put("statelike" , !userid.equals("undefined") ? getIsLikeState(bd.getCmtid(),1,userid) : false);                     pList.add(parent);                 }else{                     comm.put("replyUserid",bd.getCmtuserid());                     comm.put("replyNickName",bd.getCmtnickname());                     comm.put("replyIdx",bd.getReplyidx().toString());                     comm.put("cmtID",bd.getCmtid().toString());                     comm.put("boardNum",bd.getBoardnum().toString());                     comm.put("reply",bd.getCmtcontent());                     comm.put("photo",bd.getPhoto());                     parent.put("likeCount",bd.getCmtlike());                     comm.put("commentFiles",getCommentFiles(bd.getCmtid(),"N"));                     comm.put("statelike" , !userid.equals("undefined") ? getIsLikeState(bd.getCmtid(),1,userid) : false);                     sublist.add(comm);                 }             } catch (Exception es) {                 es.printStackTrace();             }        });        HashMap obj = new HashMap();        obj.put("board",e);        obj.put("boardFiles",boardFiles);        obj.put("replySublist",sublist);        obj.put("replyList",pList);        res.setResultData(obj);        return  res;    }    private Boolean getIsLikeState(Long id ,int type,String userid) throws Exception{        Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(Long.valueOf(id),type,userid);        Boolean ishit  =lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();        return ishit;    }    private List<CommentFileupload> getCommentFiles(Long cmtid,String yndel){        List<CommentFileupload> commentFiles =  commentFileuploadReop.findByCmtidAndYnDelOrderByRegdateTimeAsc(cmtid,yndel);        return commentFiles;    }}