package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.*;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.CommunityService;import lombok.AllArgsConstructor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.criteria.Order;import java.time.LocalDateTime;import java.util.*;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.atomic.AtomicInteger;import java.util.function.Function;import java.util.function.Predicate;import java.util.stream.Collectors;@Service@Transactional@AllArgsConstructorpublic class CommunityServiceImpl implements CommunityService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private InterestRopo interestRopo;    @Autowired    private CommunityRepo communityRepo;    @Autowired    private BoardRepo boardRepo;    @Autowired    private LikeMngRepo likeMngRepo;    @Autowired    private CommunityListRepo communityListRepo;    @Autowired    private BoardCommentRepo boardCommentRepo;    @Autowired    private KeywordSearchRepo keywordSearchRepo;    @Autowired    private MembersRepo membersRepo;    @Autowired    private MileageRepo mileageRepo;    /**     * 구독중     * @param userid     * @param commnm     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult watch(String userid, String commnm) throws ItDaExceptionHandler, Exception {        return saveWatch(userid, commnm);    }    /**     * 구독 취소     * @param userid     * @param commnm     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult unWatch(String userid, String commnm) throws ItDaExceptionHandler, Exception {        return cancelWatch(userid, commnm);    }    /**     * 커뮤니티 조회     * @param userid     * @param commnm     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectCom(String userid, String commnm,int page, int size,String sortType,String sortReply,String flagType) throws ItDaExceptionHandler, Exception {        return selectOneCom(userid, commnm,page,size,sortType,sortReply,flagType);    }    /**     * 커뮤니티 일괄 조회     * @param userid     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectComList(String userid) throws ItDaExceptionHandler, Exception {        return selectList(userid);    }    /**     * 커뮤니티 모두보기     * @param userid     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectCommAllView(String sorttype,String userid,int page,int size) throws ItDaExceptionHandler, Exception {        return comAllView(sorttype,userid,page,size);    }    /**     * 키워드 검     * @param word     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult serach(String word,String userid,int page,int size,String sortType,String sortReplyType,String flagType) throws ItDaExceptionHandler, Exception {        return keywordSearch(word,userid, page, size, sortType, sortReplyType, flagType);    }    private ItDaResult keywordSearch(String word,String userid,int page,int size,String sortType,String sortReplyType,String flagType) throws Exception{        ItDaResult res = new ItDaResult();        List<Board> boards = boardRepo.findByContentLikeOrTitleLikeAndYnDelOrderByRegdateTimeDesc("%" + word + "%","%" + word + "%","N");        List<BoardComment> comment = boardCommentRepo.findByCmtcontentLikeAndYnDelOrderByRegdateTimeDesc("%" + word + "%","N");        for(BoardComment bc : comment){            Optional<Board> e = boardRepo.findByNum(bc.getBoardnum());            Board bd = e.get();            boards.add(bd);        }        /**         * 커뮤니티 리스트         */        if(sortType.equals("listLike") && sortReplyType.equals("0")){            Collections.sort(boards, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getLikeCount() - b1.getLikeCount();                }            });        }else if(sortType.equals("listLike") && sortReplyType.equals("1")){            Collections.sort(boards, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getRegdateTime().compareTo(b1.getRegdateTime());                }            });        }else if(sortType.equals("listReply") && sortReplyType.equals("0")){            Collections.sort(boards, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getCommentCount() - b1.getCommentCount();                }            });        }else if(sortType.equals("listReply") && sortReplyType.equals("1")){            Collections.sort(boards, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b1.getCommentCount()-b2.getCommentCount();                }            });        }        Pageable pageable = PageRequest.of(page, size, Sort.Direction.ASC, sortType.equals("0") ? "likeCount" : "num");        int start = (int) pageable.getOffset();        int end = (start + pageable.getPageSize()) > boards.size() ? boards.size() : (start + pageable.getPageSize());        Page<Board> result = new PageImpl<Board>(boards.subList(start,end), pageable,boards.size());        List<Board> list = result.getContent();        List<CommunityList> communityLists = communityListRepo.findByComNmLike("%" + word + "%");        List<KeywordSearch> keyWord = keywordSearchRepo.findByKeywordLikeOrderByKeyworCntDesc("%" + word + "%");        List<KeywordSearch> resultKey= distinctArray(keyWord, "keyword");        saveKeyword(word,userid);        HashMap map = new HashMap();        List<Board> fiterList = new ArrayList<>();        if(flagType.equals("all")){            map.put("LIST",list);        }else{            List<String> flagTypes = Arrays.asList(flagType.split(","));            for(String flag : flagTypes){                list.forEach(board -> {                    if(flag.equals(board.getFlag())){                        fiterList.add(board);                    }                });            }            map.put("LIST",fiterList);        }        map.put("communityLists",communityLists);        map.put("keyWord",resultKey);        map.put("PAGE_SIZE" ,result.getSize());        map.put("TOTAL_PAGE" ,result.getTotalPages());        map.put("TOTAL_COUNT" ,result.getTotalElements());        map.put("NEXT" , result.nextPageable());        res.setResultData(map);        return res;    }    public static List<KeywordSearch> distinctArray(List<KeywordSearch> target, Object key){        if(target != null){            target = target.stream().filter(distinctByKey(o-> o.getKeyword())).collect(Collectors.toList());        }        return target;    }    //중복 제거를 위한 함수    public static <T> Predicate<T> distinctByKey(Function<? super T,Object> keyExtractor) {        Map<Object,Boolean> seen = new ConcurrentHashMap<>();        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;    }    private void saveKeyword(String word,String userid) throws Exception{        LocalDateTime currentDateTime = LocalDateTime.now();        if(keywordSearchRepo.findByKeyword(word).equals(Optional.empty())){            KeywordSearch key = KeywordSearch.builder()                    .userid(userid)                    .keyword(word)                    .regdateTime(currentDateTime)                    .keyworCnt(1)                    .build();            keywordSearchRepo.save(key);        }else{            Optional<KeywordSearch> e = keywordSearchRepo.findByKeyword(word);            KeywordSearch entity = e.get();            int cnt = entity.getKeyworCnt();            if (e.isPresent()) {                e.get().setKeyworCnt(cnt + 1);                keywordSearchRepo.save(entity);            }        }    }    private ItDaResult comAllView(String sorttype,String userid,int page,int size)throws Exception{        ItDaResult result = new ItDaResult();        String sortColum = sorttype.equals("0") ? "comNum" : "regDateTime";        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, sortColum);        Page<CommunityList> comList = communityListRepo.findAll(pageable);        List<CommunityList> list = comList.getContent();        List<Interest> inter = interestRopo.findByUseridAndComYn(userid,"Y");        if(list.size() != 0 && inter.size() != 0){            for (CommunityList com : list){                for (Interest in : inter){                    if(com.getComNm().equals(in.getComNm())){                        com.setYnGudok("Y");                    }                }            }        }        HashMap map = new HashMap();        map.put("PAGE_SIZE" ,comList.getSize());        map.put("TOTAL_PAGE" ,comList.getTotalPages());        map.put("TOTAL_COUNT" ,comList.getTotalElements());        map.put("NEXT" , comList.nextPageable());        map.put("list",list);        result.setResultData(map);        return result;    }    private ItDaResult selectList(String userid) throws Exception{        ItDaResult res = new ItDaResult();        List<CommunityList> list = communityListRepo.findAll();        List<Interest> inter = interestRopo.findByUserid(userid);        if(list.size() != 0 && inter.size() != 0){            for (CommunityList com : list){                for (Interest in : inter){                    if(com.getComNm().equals(in.getComNm())){                        if(in.getComYn().equals("Y")){                            com.setYnGudok("Y");                        }else{                            com.setYnGudok("N");                        }                    }                }            }        }        res.setResultData(list);        return res;    }    private ItDaResult selectOneCom(String userid , String comnm , int page, int size,String sortType,String sortReply,String flagType) throws Exception{        ItDaResult res = new ItDaResult();        List<Board> boardList = new ArrayList<>();        HashMap map = new HashMap();        AtomicInteger eventCnt = new AtomicInteger();        communityRepo.findByComNm(comnm).forEach(com ->{            if(getBoard(com.getBoardNum()) != null){                if(getBoard(com.getBoardNum()).getFlag().equals("3")){                    eventCnt.addAndGet(1);                }                boardList.add(getBoard(com.getBoardNum()));            }        });        /**         * 입국자수 == 구독수         */        List<Interest> interest = interestRopo.findByComNmAndComYn(comnm,"Y");        /**         * 구독중인지 아닌지         */        if(interestRopo.findByUseridAndComNm(userid,comnm).equals(Optional.empty())){            map.put("YN_GUDOK","N");        }else{            Optional<Interest> interId = interestRopo.findByUseridAndComNm(userid,comnm);            Interest inter = interId.get();            map.put("YN_GUDOK",inter.getComYn());        }        /**         * 커뮤니티 리스트         */        if(sortType.equals("listLike") && sortReply.equals("0")){            Collections.sort(boardList, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getLikeCount() - b1.getLikeCount();                }            });        }else if(sortType.equals("listLike") && sortReply.equals("1")){            Collections.sort(boardList, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getRegdateTime().compareTo(b1.getRegdateTime());                }            });        }else if(sortType.equals("listReply") && sortReply.equals("0")){            Collections.sort(boardList, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b2.getCommentCount() - b1.getCommentCount();                }            });        }else if(sortType.equals("listReply") && sortReply.equals("1")){            Collections.sort(boardList, new Comparator<Board>() {                @Override                public int compare(Board b1, Board b2) {                    return b1.getCommentCount()-b2.getCommentCount();                }            });        }        Pageable pageable = PageRequest.of(page, size, Sort.Direction.ASC, sortType.equals("0") ? "likeCount" : "num");        int start = (int) pageable.getOffset();        int end = (start + pageable.getPageSize()) > boardList.size() ? boardList.size() : (start + pageable.getPageSize());        Page<Board> result = new PageImpl<Board>(boardList.subList(start,end), pageable,boardList.size());        List<Board> list = result.getContent();        if(!userid.equals("undefined")) {            list.forEach(board -> {                Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(board.getNum(), 0, userid);                Boolean ishit = lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();                board.setStatelike(ishit);            });        }        List<Board> fiterList = new ArrayList<>();        if(flagType.equals("all")){            map.put("LIST",list);        }else{            List<String> flagTypes = Arrays.asList(flagType.split(","));            for(String flag : flagTypes){                list.forEach(board -> {                    if(flag.equals(board.getFlag())){                        fiterList.add(board);                    }                });            }            map.put("LIST",fiterList);        }        map.put("PAGE_SIZE",result.getSize());        map.put("TOTAL_PAGE",result.getTotalPages());        map.put("TOTAL_COUNT",boardList.size());        map.put("NEXT",result.nextPageable());        map.put("BOARD_CNT" ,boardList.size());        map.put("EVENT_CNT" ,eventCnt);        map.put("GUDOK_CNT" ,interest.size());        res.setResultData(map);        return res;    }    private Pageable getPageable(int page,int size,String sortTy , String sortReplyTy){        Pageable pageables = null;        if(sortTy.equals("0") && sortReplyTy.equals("0")){            pageables = PageRequest.of(page, size, Sort.by("commentCount").descending().and(Sort.by("likeCount").descending()));        }else if(sortTy.equals("1") && sortReplyTy.equals("1")){            pageables = PageRequest.of(page, size, Sort.by("commentCount").ascending().and(Sort.by("num").descending()));        }else if(sortTy.equals("0") && sortReplyTy.equals("1")){            pageables = PageRequest.of(page, size, Sort.by("commentCount").descending().and(Sort.by("num").descending()));        }else if(sortTy.equals("1") && sortReplyTy.equals("0")){            pageables = PageRequest.of(page, size, Sort.by("commentCount").ascending().and(Sort.by("likeCount").descending()));        }        return pageables;    }    private Board getBoard(Long num){        Optional<Board> bd = boardRepo.findByNumAndYnDel(num,"N");        if(!bd.equals(Optional.empty())){            Board board = bd.get();            return board;        }else{            return null;        }    }    private ItDaResult saveWatch(String userid ,String commnm) throws Exception {        ItDaResult res = new ItDaResult();        if(interestRopo.findByUseridAndComNm(userid,commnm).equals(Optional.empty())){            Interest inst = Interest.builder()                    .userid(userid)                    .comNm(commnm)                    .comYn("Y")                    .build();            interestRopo.save(inst);            upGudokCnt(commnm);            res.setResultData(inst);        }else{            Optional<Interest> e = interestRopo.findByUseridAndComNm(userid,commnm);            Interest entity = e.get();            if (e.isPresent()) {                e.get().setComNm(commnm);                e.get().setComYn("Y");                e.get().setUserid(userid);                interestRopo.save(entity);                upGudokCnt(commnm);                res.setResultData(entity);            }        }        /**         * 마일리지         */        try {            LocalDateTime currentDateTime = LocalDateTime.now();            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.watch;            Optional<Member> member = membersRepo.findByUserid(userid);            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(userid)                    .mlgCode("E0")                    .mlgType("관심사구독")                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" : "회수")                    .mlgRefer(commnm)                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        return res;    }    private void upGudokCnt (String commnm) throws Exception{        if(!communityListRepo.findByComNm(commnm).equals(Optional.empty())) {            Optional<CommunityList> e = communityListRepo.findByComNm(commnm);            CommunityList entity = e.get();            int gudokCnt = entity.getComNum();            if (e.isPresent()) {                e.get().setComNum(gudokCnt + 1);                communityListRepo.save(entity);            }        }    }    private void downGudokCnt (String commnm) throws Exception{        if(!communityListRepo.findByComNm(commnm).equals(Optional.empty())) {            Optional<CommunityList> e = communityListRepo.findByComNm(commnm);            CommunityList entity = e.get();            int gudokCnt = entity.getComNum();            if (e.isPresent()) {                e.get().setComNum(gudokCnt - 1);                communityListRepo.save(entity);            }        }    }    private ItDaResult cancelWatch(String userid ,String commnm) throws Exception {        ItDaResult res = new ItDaResult();        if(!interestRopo.findByUseridAndComNm(userid,commnm).equals(Optional.empty())){            Optional<Interest> e = interestRopo.findByUseridAndComNm(userid,commnm);            Interest entity = e.get();            if (e.isPresent()) {                e.get().setComNm(commnm);                e.get().setComYn("N");                e.get().setUserid(userid);                interestRopo.save(entity);                downGudokCnt(commnm);                res.setResultData(entity);            }        }        /**         * 마일리지         */        try {            LocalDateTime currentDateTime = LocalDateTime.now();            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.unWatch;            Optional<Member> member = membersRepo.findByUserid(userid);            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(userid)                    .mlgCode("E1")                    .mlgType("관심사 구독 취소")                    .mlgRefer(commnm)                    .mlgKind(mileag.getValue() > 0 ? "적립" : "회수")                    .point(mileag.getValue())                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        return res;    }}