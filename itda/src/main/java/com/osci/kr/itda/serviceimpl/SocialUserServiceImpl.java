package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.domain.Mileage;import com.osci.kr.itda.domain.Role;import com.osci.kr.itda.domain.SocialProvider;import com.osci.kr.itda.entity.Member;import com.osci.kr.itda.entity.seq.NickName;import com.osci.kr.itda.entity.sns.*;import com.osci.kr.itda.jwt.JwtTokenProvider;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.SocialUserService;import com.osci.kr.itda.utills.EamilTemplate;import com.osci.kr.itda.utills.FaceBookSDK;import com.osci.kr.itda.utills.RedisUtil;import com.osci.kr.itda.utills.StringUtil;import lombok.AllArgsConstructor;import lombok.Getter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.EntityManagerFactory;import javax.persistence.Persistence;import javax.persistence.PersistenceContext;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.time.LocalDateTime;import java.util.*;@Service@Transactional@AllArgsConstructorpublic class SocialUserServiceImpl implements SocialUserService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MembersRepo membersRepo;    @Autowired    private SocialMemberRepo socialMemberRepo;    @Autowired    private FaceBookUserRepo faceBookUserRepo;    @Autowired    private KakaoUserRepo kakaoUserRepo;    @Autowired    private NaverUserRepo naverUserRepo;    @Autowired    private GoogleUserRepo googleUserRepo;    @Autowired    private UserServiceImpl userService;    @Autowired    private HttpServletRequest request;    @Autowired    private HttpServletResponse responses;    @Autowired    private final JwtTokenProvider jwtTokenProvider;    @Autowired    private RedisUtil redisUtil;    @Autowired    private FaceBookSDK faceBookSDK;    @Autowired    private NotiServiceImpl notiService;    @Autowired    private MileageRepo mileageRepo;    @Autowired    private MemberMngIDRepo memberMngIDRepo;    @Getter    @PersistenceContext    private EntityManager em;    public ItDaResult soicalSignIn(Object obj, HttpServletRequest req, HttpServletResponse res) throws ItDaExceptionHandler, Exception {        return socialLogin(obj , req , res);    }    public ItDaResult socialLogin(Object obj , HttpServletRequest req, HttpServletResponse res) throws Exception {        ItDaResult result = new ItDaResult();        SocialProvider so = setType((int) ((LinkedHashMap) obj).get("snsType"));        switch(so) {            case FACEBOOK:                    result = loginFaceBook(obj,res);                    break;            case KAKAO:                    result = loginKakao(obj,res);                    break;            case NAVER:                    result = loginNaver(obj,res);                    break;            case GOOGLE:                    result = loginGoogle(obj,res);                    break;            default:                break;        }        return result;    }    private ItDaResult loginFaceBook(Object fb,HttpServletResponse res) throws Exception{        ItDaResult result = new ItDaResult();        FaceBookUser fbu = new FaceBookUser();        String userid = (String) ((LinkedHashMap) fb).get("userID");        if(!memberMngIDRepo.findByUserid(String.valueOf(userid)).equals(Optional.empty()) && memberMngIDRepo.findByUserid(userid).get().getStatus()  != 0){            result.setResultMsg("FAIL, ID IS outOfMember");            result.setResultCode(400);            result.setErrorCode("outOfMember");            return result;        }        //faceBookSDK.FaceBookAccount();        /**         * 페이스북 유저정보 업데이트 및 저장         */        if(faceBookUserRepo.findByUserid(userid).equals(Optional.empty())){            fbu = saveFbUser(fb);        }else{            fbu = updateFbUser(fb);        }        /**         * jwt Token 관리         */        HashMap tokenMap = SnsJwtManagerFunction(fbu.getUserid(),res);        List<String> roles = new ArrayList<>();        if(!membersRepo.findByUserid(userid).equals(Optional.empty())){            roles = membersRepo.findByUserid(userid).get().getRoles();            logger.info(roles.get(0));        }        /**         * 멤버 정보         */        Member mem = Member.builder()            .mem_userid(fbu.getUserid())            .mem_email(fbu.getEmail())            .roles((roles.size() == 0 || roles.get(0).equals("ROLE_SNS_USER")) ? Collections.singletonList(Role.SNSMEMBER.getValue()):Collections.singletonList(Role.ADMIN.getValue()))            .registerIp(request.getRemoteAddr())            .nickname(fbu.getName())            .snsType("1")            .emailVerified(getEmailVerified(fbu.getEmail(),fbu.getUserid()))            .photo(fbu.getPicture())            .build();        /**         * 알림         */        if( !setSnsAuthEmailState(fbu.getEmail(),fbu.getUserid())){            notiService.SaveNotiEmail(mem);        }        /**         * return 결과 값         */        HashMap map = new HashMap();        map.put("authEmail",setSnsAuthEmailState(fbu.getEmail(),fbu.getUserid()));        map.put("member",mem);        map.put("token",tokenMap);        result.setResultData(map);        result.setResultMsg("SUCCESS");        return result;    }    private ItDaResult loginNaver(Object obj , HttpServletResponse res) throws Exception {        ItDaResult result = new ItDaResult();        String userid = (String) ((LinkedHashMap) obj).get("id");        NaverUser naverUser = new NaverUser();        if(!memberMngIDRepo.findByUserid(String.valueOf(userid)).equals(Optional.empty()) && memberMngIDRepo.findByUserid(userid).get().getStatus()  != 0){            result.setResultMsg("FAIL, ID IS outOfMember");            result.setResultCode(400);            result.setErrorCode("outOfMember");            return result;        }        /**         * 네이버 유저 정보 업데이트 및 저장         */        if(naverUserRepo.findByUserid(userid).equals(Optional.empty())){            naverUser = saveNaverUser(obj);        }else{            naverUser = updateNaverUser(obj);        }        /**         * jwt Token 관리         */        HashMap tokenMap = SnsJwtManagerFunction(naverUser.getUserid(),res);        List<String> roles = new ArrayList<>();        if(!membersRepo.findByUserid(userid).equals(Optional.empty())){            roles = membersRepo.findByUserid(userid).get().getRoles();            logger.info(roles.get(0));        }        /**         *  유저 정보         */        Member mem = Member.builder()                .mem_userid(naverUser.getUserid())                .mem_email(naverUser.getEmail())                .roles((roles.size() == 0 || roles.get(0).equals("ROLE_SNS_USER")) ? Collections.singletonList(Role.SNSMEMBER.getValue()) : Collections.singletonList(Role.ADMIN.getValue()))                .registerIp(request.getRemoteAddr())                .nickname(naverUser.getName())                .emailVerified(getEmailVerified(naverUser.getEmail(),naverUser.getUserid()))                .snsType("3")                .photo(naverUser.getProfile_image())                .build();        /**         * 알림         */        if( !setSnsAuthEmailState(naverUser.getEmail(),naverUser.getUserid())){            notiService.SaveNotiEmail(mem);        }        /**         * return 결과 값         */        HashMap map = new HashMap();        map.put("authEmail", setSnsAuthEmailState(naverUser.getEmail(),naverUser.getUserid()));        map.put("token",tokenMap);        map.put("member",mem);        result.setResultData(map);        result.setResultMsg("SUCCESS");        return result;    }    private ItDaResult loginGoogle(Object obj ,HttpServletResponse res) throws Exception {        ItDaResult result = new ItDaResult();        GoogleUser gl = new GoogleUser();        String googleId = (String)((LinkedHashMap) obj).get("googleId");        if(!memberMngIDRepo.findByUserid(String.valueOf(googleId)).equals(Optional.empty()) && memberMngIDRepo.findByUserid(googleId).get().getStatus()  != 0){            result.setResultMsg("FAIL, ID IS outOfMember");            result.setResultCode(400);            result.setErrorCode("outOfMember");            return result;        }        /**         * 구글 유저 정보 저장 및 업데이트         */        if(googleUserRepo.findByUserid(googleId).equals(Optional.empty())){            gl = saveGoogleUser(obj);        }else{            gl = updateGoogleUser(obj);        }        /**         * jwt Token 관리         */        HashMap tokenMap = SnsJwtManagerFunction(gl.getUserid(),res);        String email = "";        List<String> roles = new ArrayList<>();        if(!membersRepo.findByUserid(googleId).equals(Optional.empty())){            roles = membersRepo.findByUserid(googleId).get().getRoles();            email = membersRepo.findByUserid(googleId).get().getEmail();            logger.info(roles.get(0));        }        Member mem = Member.builder()                .mem_userid(gl.getUserid())                .mem_email(email.equals("") ? gl.getEmail() : email)                .roles((roles.size() == 0 || roles.get(0).equals("ROLE_SNS_USER")) ? Collections.singletonList(Role.SNSMEMBER.getValue()) : Collections.singletonList(Role.ADMIN.getValue()))                .registerIp(request.getRemoteAddr())                .nickname(gl.getName())                .emailVerified(getEmailVerified(email.equals("") ? gl.getEmail() : email,gl.getUserid()))                .snsType("4")                .photo(gl.getProfileurl())                .build();        /**         * 알림         */        if(!setSnsAuthEmailState(gl.getEmail(),gl.getUserid())){            notiService.SaveNotiEmail(mem);        }        /**         * return 결과 값         */        HashMap map = new HashMap();        map.put("authEmail", setSnsAuthEmailState(gl.getEmail(),gl.getUserid()));        map.put("member",mem);        map.put("token",tokenMap);        result.setResultData(map);        result.setResultMsg("SUCCESS");        return result;    }    private ItDaResult loginKakao(Object obj , HttpServletResponse res) throws Exception {        ItDaResult result = new ItDaResult();        KakaoUser kaUser = new KakaoUser();        Map profile = (Map) ((LinkedHashMap) obj).get("profile");        int userid  = (int)profile.get("id");        if(!memberMngIDRepo.findByUserid(String.valueOf(userid)).equals(Optional.empty()) && memberMngIDRepo.findByUserid(String.valueOf(userid)).get().getStatus()  != 0){            result.setResultMsg("FAIL, ID IS outOfMember");            result.setResultCode(400);            result.setErrorCode("outOfMember");            return result;        }        /**         * 카카오 유저 정보 저장 및 업데이트         */        if(kakaoUserRepo.findByUserid(String.valueOf(userid)).equals(Optional.empty())){            kaUser = saveKaKaoUser(obj);        }else{            kaUser = updateKaKaoUser(obj);        }        /**         * jwt Token 관리         */        HashMap tokenMap = SnsJwtManagerFunction(kaUser.getUserid(),res);        /**         * 멤버 정보         */        List<String> roles = new ArrayList<>();        String email="";        if(!membersRepo.findByUserid(kaUser.getUserid()).equals(Optional.empty())){           roles = membersRepo.findByUserid(kaUser.getUserid()).get().getRoles();           logger.info(roles.get(0));            email = membersRepo.findByUserid(kaUser.getUserid()).get().getEmail();        }        Member mem = Member.builder()                .mem_userid(kaUser.getUserid())                .mem_email(email.equals("") ? kaUser.getEmail() : email)                .roles((roles.size() == 0 || roles.get(0).equals("ROLE_SNS_USER")) ? Collections.singletonList(Role.SNSMEMBER.getValue()) : Collections.singletonList(Role.ADMIN.getValue()))                .registerIp(request.getRemoteAddr())                .nickname(kaUser.getName())                .emailVerified(getEmailVerified(kaUser.getEmail(),kaUser.getUserid()))                .snsType("2")                .photo(kaUser.getProfileimage())                .build();        /**         * 알림         */        if( !setSnsAuthEmailState(kaUser.getEmail(),kaUser.getUserid())){             notiService.SaveNotiEmail(mem);        }        /**         * return 결과 값         */        HashMap map = new HashMap();        map.put("authEmail",setSnsAuthEmailState(email.equals("") ? kaUser.getEmail() : email,kaUser.getUserid()));        map.put("token",tokenMap);        map.put("member",mem);        result.setResultData(map);        result.setResultMsg("SUCCESS");        return result;    }    private String getEmailVerified(String email,String userid) throws Exception{        Optional<Member> member = membersRepo.findByUserid(userid);        Member mem = member.get();        if(mem.getEmailVerified().equals("Y")){            return "Y";        }else{           return email != null && !email.equals("") ? "Y" :"N";        }    }    private SocialProvider setType(int snsType){        SocialProvider so;        if(snsType == 1){            so = SocialProvider.FACEBOOK;        }else if(snsType == 2){            so = SocialProvider.KAKAO;        }else if(snsType == 3){            so = SocialProvider.NAVER;        }else{            so = SocialProvider.GOOGLE;        }        return so;    }    private String getPicture(Map<String,String> picture){        Set<String> set =picture.keySet();        Iterator<String>  iter = set.iterator();        String url ="";        while (iter.hasNext()){            String key = ((String)iter.next());            Map<String,String> value = (Map<String, String>) ((LinkedHashMap) picture).get(key);            url = value.get("url");            logger.debug("key" + key + ":" +   "value" + value);        }        return url;    }    private FaceBookUser saveFbUser(Object fb) throws Exception{        int snsType = (int) ((LinkedHashMap) fb).get("snsType");        String userid = (String) ((LinkedHashMap) fb).get("userID");        String email = (String) ((LinkedHashMap) fb).get("email");        String accessToken = (String) ((LinkedHashMap) fb).get("accessToken");        String signedRequest = (String) ((LinkedHashMap) fb).get("signedRequest");        String name = (String) ((LinkedHashMap) fb).get("name");        String nickname = (String) ((LinkedHashMap) fb).get("nickname");        int data_access_expiration_time = (int) ((LinkedHashMap) fb).get("data_access_expiration_time");        String pic = getPicture((Map) ((LinkedHashMap) fb).get("picture"));        LocalDateTime currentDateTime = LocalDateTime.now();        String nic = createNickName(name);        FaceBookUser fbu = FaceBookUser.builder()                .userid(userid)                .email(email)                .accesstoken(accessToken)                .signedreq(signedRequest)                .name(nic)                .tokenexpire(data_access_expiration_time)                .picture(pic)                .registerdatetime(currentDateTime)                .build();        faceBookUserRepo.save(fbu);        if(!membersRepo.findByUserid(userid).equals(Optional.empty())) {            userid = getRandomUseridString().concat(userid);        }        saveSoicalMember(userid,snsType ,email,nic);        savePlatformMember(userid, email, createNickName(name), pic, snsType);        return fbu;    }    private FaceBookUser updateFbUser(Object fb) throws Exception{        String userid = (String) ((LinkedHashMap) fb).get("userID");        String email = (String) ((LinkedHashMap) fb).get("email");        String accessToken = (String) ((LinkedHashMap) fb).get("accessToken");        String signedRequest = (String) ((LinkedHashMap) fb).get("signedRequest");        String name = (String) ((LinkedHashMap) fb).get("name");        int data_access_expiration_time = (int) ((LinkedHashMap) fb).get("data_access_expiration_time");        String pic = getPicture((Map) ((LinkedHashMap) fb).get("picture"));        LocalDateTime currentDateTime = LocalDateTime.now();        Optional<FaceBookUser> e = faceBookUserRepo.findByUserid(userid);        FaceBookUser fbEntity = e.get();        if (e.isPresent()) {            e.get().setEmail(email);            e.get().setAccesstoken(accessToken);            e.get().setSignedreq(signedRequest);            e.get().setTokenexpire(data_access_expiration_time);            e.get().setName(createNickName(name));            e.get().setPicture(pic);            e.get().setRegisterUpdatetime(currentDateTime);            faceBookUserRepo.save(fbEntity);        }        return fbEntity;    }    private KakaoUser saveKaKaoUser(Object kaUser) throws Exception{        KakaoUser kakao = new KakaoUser();        try{            int snsType = (int) ((LinkedHashMap) kaUser).get("snsType");            Map profile = (Map) ((LinkedHashMap) kaUser).get("profile");            int userid  = (int)profile.get("id");            Map<String,String> kakao_account = (Map<String, String>) ((LinkedHashMap) profile).get("kakao_account");            Map<String,String> profiles = (Map<String, String>) ((LinkedHashMap) kakao_account).get("profile");            Boolean profile_needs_agreement = (Boolean) ((LinkedHashMap) kakao_account).get("profile_needs_agreement");            String email = profiles == null ? "" : (String)profiles.get("email");            Map tokenInfo = (Map) ((LinkedHashMap) kaUser).get("response");            int refresh_token_expires_in = (int)tokenInfo.get("refresh_token_expires_in");            int expires_in = (int)tokenInfo.get("expires_in");            LocalDateTime currentDateTime = LocalDateTime.now();            String nic = createNickName(profiles == null ? "" : (String)profiles.get("nickname"));            kakao = KakaoUser.builder()                    .userid(String.valueOf(userid))                    .email(email == null ? "" : email)                    .accesstoken((String) tokenInfo.get("access_token"))                    .nickname(nic)                    .profile_needs_agreement(profile_needs_agreement)                    .RefreshToken((String)tokenInfo.get("refresh_token"))                    .profileimage(profiles == null ? "" : (String)profiles.get("profile_image_url"))                    .thumbnail_image_url(profiles == null ? "" : (String) profiles.get("thumbnail_image_url"))                    .name(profiles == null ? "" : (String)profiles.get("nickname"))                    .token_type((String)tokenInfo.get("token_type"))                    .expires_in(String.valueOf(expires_in))                    .refresh_token_expires_in(String.valueOf(refresh_token_expires_in))                    .registerdatetime(currentDateTime)                    .build();            kakaoUserRepo.save(kakao);            String user_c_id = String.valueOf(userid);            if(!membersRepo.findByUserid(user_c_id).equals(Optional.empty())) {                user_c_id = getRandomUseridString().concat(user_c_id);            }            saveSoicalMember(user_c_id, snsType ,email ,nic);            savePlatformMember(user_c_id, email,  nic, profiles == null ? "" : (String)profiles.get("profile_image_url"), snsType);        }catch (Exception e){            e.getMessage();        }        return kakao;    }    private KakaoUser updateKaKaoUser(Object kaUser) throws Exception{        KakaoUser kaEntity = new KakaoUser();        try{            Map profile = (Map) ((LinkedHashMap) kaUser).get("profile");            int userid  = (int)profile.get("id");            Map<String,String> kakao_account = (Map<String, String>) ((LinkedHashMap) profile).get("kakao_account");            Map<String,String> profiles = (Map<String, String>) ((LinkedHashMap) kakao_account).get("profile");            Map tokenInfo = (Map) ((LinkedHashMap) kaUser).get("response");            int refresh_token_expires_in = (int)tokenInfo.get("refresh_token_expires_in");            int expires_in = (int)tokenInfo.get("expires_in");            LocalDateTime currentDateTime = LocalDateTime.now();            Optional<KakaoUser> e = kakaoUserRepo.findByUserid(String.valueOf(userid));            kaEntity = e.get();            if (e.isPresent()) {                e.get().setAccesstoken((String) tokenInfo.get("access_token"));                e.get().setNickname(createNickName(profiles == null ? "" : (String)profiles.get("name")));                e.get().setProfileimage(profiles == null ? "" : (String) profiles.get("thumbnail_image_url"));                e.get().setRefresh_token_expires_in(String.valueOf(refresh_token_expires_in));                e.get().setThumbnail_image_url(profiles == null ? "" : ((String) profiles.get("thumbnail_image_url")));                e.get().setExpires_in(String.valueOf(expires_in));                e.get().setToken_type((String)tokenInfo.get("token_type"));                e.get().setRegisterUpdatetime(currentDateTime);                kakaoUserRepo.save(kaEntity);            }        }catch (Exception e){            e.getMessage();        }        return kaEntity;    }    private NaverUser saveNaverUser(Object naUser) throws Exception{        String userid = (String) ((LinkedHashMap) naUser).get("id");        int snsType = (int) ((LinkedHashMap) naUser).get("snsType");        LocalDateTime currentDateTime = LocalDateTime.now();        String nic = createNickName((String) ((LinkedHashMap) naUser).get("nickname"));        NaverUser naver = NaverUser.builder()                .userid(userid)                .email((String) ((LinkedHashMap) naUser).get("email"))                .profile_image((String) ((LinkedHashMap) naUser).get("profile_image"))                .name((String) ((LinkedHashMap) naUser).get("name"))                .nickname(nic)                .birthday((String) ((LinkedHashMap) naUser).get("birthday"))                .registerdatetime(currentDateTime)                .build();        naverUserRepo.save(naver);        if(!membersRepo.findByUserid(userid).equals(Optional.empty())) {            userid = getRandomUseridString().concat(userid);        }        saveSoicalMember(userid,snsType ,(String) ((LinkedHashMap) naUser).get("email"),nic);        savePlatformMember(                userid,                (String) ((LinkedHashMap) naUser).get("email"),                nic,                (String) ((LinkedHashMap) naUser).get("profile_image"),                snsType);        return naver;    }    private NaverUser updateNaverUser(Object naUser) throws Exception{        String userid = (String) ((LinkedHashMap) naUser).get("id");        LocalDateTime currentDateTime = LocalDateTime.now();        Optional<NaverUser> e = naverUserRepo.findByUserid(userid);        NaverUser Entity = e.get();        if (e.isPresent()) {            e.get().setEmail((String) ((LinkedHashMap) naUser).get("email"));            e.get().setBirthday((String) ((LinkedHashMap) naUser).get("birthday"));            e.get().setName(createNickName((String) ((LinkedHashMap) naUser).get("name")));            e.get().setProfile_image((String) ((LinkedHashMap) naUser).get("profile_image"));            e.get().setRegisterUpdatetime(currentDateTime);            e.get().setNickname( (String) ((LinkedHashMap) naUser).get("nickname"));            naverUserRepo.save(Entity);        }        return Entity;    }    private GoogleUser saveGoogleUser(Object glUser) throws Exception{        Map profileObj = (Map) ((LinkedHashMap) glUser).get("profileObj");        String googleId = (String)((LinkedHashMap) glUser).get("googleId");        int snsType = (int) ((LinkedHashMap) glUser).get("snsType");        Map tokenObj = (Map)((LinkedHashMap) glUser).get("tokenObj");        LocalDateTime currentDateTime = LocalDateTime.now();        String nic = createNickName((String)((LinkedHashMap) profileObj).get("name"));        GoogleUser gl = GoogleUser.builder()                .userid(googleId)                .email((String)((LinkedHashMap) profileObj).get("email"))                .accesstoken((String) ((LinkedHashMap) glUser).get("accessToken"))                .expires_at((Long)tokenObj.get("expires_at"))                .expires_in((int)tokenObj.get("expires_in"))                .familyname((String)((LinkedHashMap) profileObj).get("familyName"))                .givenname((String)((LinkedHashMap) profileObj).get("givenName"))                .name(nic)                .profileurl((String)((LinkedHashMap) profileObj).get("imageUrl"))                .tokenId((String)tokenObj.get("tokenId"))                .token_type((String)tokenObj.get("token_type"))                .registerdatetime(currentDateTime)                .build();        googleUserRepo.save(gl);        if(!membersRepo.findByUserid(googleId).equals(Optional.empty())) {            googleId = getRandomUseridString().concat(googleId);        }        saveSoicalMember(googleId, snsType ,(String) ((LinkedHashMap) profileObj).get("email") ,nic);        savePlatformMember(                googleId,                (String) ((LinkedHashMap) profileObj).get("email"),                nic,                (String)((LinkedHashMap) profileObj).get("imageUrl"),                snsType);        return gl;    }    private GoogleUser updateGoogleUser(Object glUser) throws Exception{        Map profileObj = (Map) ((LinkedHashMap) glUser).get("profileObj");        String googleId = (String)((LinkedHashMap) glUser).get("googleId");        Map tokenObj = (Map)((LinkedHashMap) glUser).get("tokenObj");        LocalDateTime currentDateTime = LocalDateTime.now();        Optional<GoogleUser> e = googleUserRepo.findByUserid(googleId);        GoogleUser Entity = e.get();        if (e.isPresent()) {            e.get().setEmail((String)((LinkedHashMap) profileObj).get("email"));            e.get().setGivenname((String)((LinkedHashMap) profileObj).get("givenName"));            e.get().setAccesstoken((String) ((LinkedHashMap) glUser).get("accessToken"));            e.get().setExpires_at((Long)tokenObj.get("expires_at"));            e.get().setExpires_in((int)tokenObj.get("expires_in"));            e.get().setFamilyname((String)((LinkedHashMap) profileObj).get("familyName"));            e.get().setName(createNickName((String)((LinkedHashMap) profileObj).get("name")));            e.get().setProfileurl((String)((LinkedHashMap) profileObj).get("imageUrl"));            e.get().setToken_type((String)tokenObj.get("token_type"));            e.get().setTokenId((String) ((LinkedHashMap) glUser).get("tokenId"));            e.get().setRegisterUpdatetime(currentDateTime);            googleUserRepo.save(Entity);        }        return Entity;    }    private SocialMembers getSocialMember(String userid){        Optional<SocialMembers> e = socialMemberRepo.findByUserid(userid);        SocialMembers sm = e.get();        return sm;    }    private boolean setSnsAuthEmailState(String email , String userid){        return (email == null || email.equals("") || getSocialMember(userid).getAuthEmail() == null) ? false : true;    }    private String createNickName(String name){        String nicNm = (name==null || name.equals("")) ? "YRBY" +  getSeqNickname() : name;        if(!membersRepo.findByNickname(nicNm).equals(Optional.empty())){            nicNm = nicNm.concat(getRandomString());        }        return nicNm;    }    private String getRandomString(){        int leftLimit = 97; // letter 'a'        int rightLimit = 122; // letter 'z'        int targetStringLength = 5;        Random random = new Random();        String generatedString = random.ints(leftLimit, rightLimit + 1)                .limit(targetStringLength)                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();        return generatedString;    }    private String getRandomUseridString(){        int leftLimit = 97; // letter 'a'        int rightLimit = 122; // letter 'z'        int targetStringLength = 10;        Random random = new Random();        String generatedString = random.ints(leftLimit, rightLimit + 1)                .limit(targetStringLength)                .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();        return generatedString;    }    private Long getSeqNickname() {        NickName nickName = new NickName();        em.persist(nickName);        return nickName.getId();    }    public HashMap SnsJwtManagerFunction(String id , HttpServletResponse res){        HashMap map = new HashMap();        String jwtToken = jwtTokenProvider.generateToken(id, Collections.singletonList(Role.SNSMEMBER.getValue()));        String jwtRefreshToken = jwtTokenProvider.generteRefreshToken(id, Collections.singletonList(Role.SNSMEMBER.getValue()));        redisUtil.setDataExpire(jwtRefreshToken, id, JwtTokenProvider.REFRESH_TOKEN_VALIDATION_SECOND);        res.setHeader(JwtTokenProvider.ACCESS_TOKEN_NAME,jwtToken);        res.setHeader(JwtTokenProvider.REFRESH_TOKEN_NAME,jwtRefreshToken);        map.put(JwtTokenProvider.ACCESS_TOKEN_NAME,jwtToken);        map.put(JwtTokenProvider.REFRESH_TOKEN_NAME,jwtRefreshToken);        return map;    }    private void savePlatformMember(String userid,String email,String name , String pic,int SnsType) throws Exception{        com.osci.kr.itda.domain.Mileage mileag = Mileage.join;        Member mem = Member.builder()                .mem_userid(userid)                .mem_email(!membersRepo.findByEmail(email).equals(Optional.empty()) ? "" : email)                .roles(Collections.singletonList(Role.SNSMEMBER.getValue()))                .registerIp(request.getRemoteAddr())                .nickname(createNickName(name))                .snsType(String.valueOf(SnsType))                .registerIp(request.getRemoteAddr())                .point(mileag.getValue())                .emailVerified((email != null && !email.equals("")) ? "Y" : "N")                .photo(pic)                .build();        membersRepo.save(mem);        LocalDateTime currentDateTime = LocalDateTime.now();        com.osci.kr.itda.entity.Mileage mlg = com.osci.kr.itda.entity.Mileage.builder()                .userid(userid)                .mlgRefer("환영합니다.")                .mlgCode("join")                .mlgType("신규가입")                .point(mileag.getValue())                .mlgKind("적립")                .regDateTime(currentDateTime)                .build();        mileageRepo.save(mlg);    }    private void saveSoicalMember(String userid , int snsType , String email ,String nickname) throws Exception{        SocialMembers sm = SocialMembers.builder()                .userid(userid)                .snstype(snsType)                .nickname(createNickName(nickname))                .authEmail((email != null && !email.equals("")) ? "Y" : "N")                .roles(Collections.singletonList(Role.SNSMEMBER.getValue()))                .build();        socialMemberRepo.save(sm);    }}