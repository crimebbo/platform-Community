package com.osci.kr.itda.config;import com.osci.kr.itda.jwt.JwtAuthenticationFilter;import com.osci.kr.itda.jwt.JwtTokenProvider;import com.osci.kr.itda.service.UserService;import com.osci.kr.itda.utills.CookieUtil;import com.osci.kr.itda.utills.RedisUtil;import lombok.AllArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Lazy;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.builders.WebSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import org.springframework.web.cors.CorsConfiguration;import org.springframework.web.cors.CorsConfigurationSource;import org.springframework.web.cors.CorsUtils;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;import org.springframework.web.multipart.commons.CommonsMultipartResolver;import org.springframework.web.multipart.support.MultipartFilter;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.springframework.web.servlet.resource.PathResourceResolver;import java.util.ArrayList;import java.util.Arrays;import java.util.List;@Configuration@EnableWebSecurity@AllArgsConstructorpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter implements WebMvcConfigurer {    //private MemberService memberService;    private final JwtTokenProvider jwtTokenProvider;    private final RedisUtil redisUtil;    private final CookieUtil cookieUtil;    private static final String[] PUBLIC_URI = {            "/api/v1/auth/**",            "/rest/api/v1/member/signUp",            "/rest/api/v1/com/**",            "/rest/api/v1/board/**",            "/rest/api/v1/member/**",            "/rest/api/v1/noti/**",            "/rest/api/v1/mypage/**"    };    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    @Override    public void addCorsMappings(CorsRegistry registry) {        registry.addMapping("**")                .allowedOrigins("*")                .allowedHeaders("*")                .allowCredentials(true)                .allowedMethods("GET" ,"POST" ,"PUT" ,"DELETE");    }    @Bean    public CorsConfigurationSource corsConfigurationSource() {        final CorsConfiguration configuration = new CorsConfiguration();        configuration.setAllowedOrigins(Arrays.asList("*"));        configuration.setAllowedMethods(Arrays.asList("HEAD","GET", "POST", "PUT", "DELETE", "PATCH"));        configuration.setAllowCredentials(true);        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Cache-Control", "Content-Type","accessToken","refreshToken"));        final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();        source.registerCorsConfiguration("/**", configuration);        return source;    }    @Override    public void configure(WebSecurity web) throws Exception    {        // static 디렉터리의 하위 파일 목록은 인증 무시 ( = 항상통과 )        web.ignoring().antMatchers("/static/**" ,"/v2/api-docs", "/swagger-resources/**", "/swagger-ui/index.html", "/webjars/**", "/swagger-ui/**");    }    @Override    public void addResourceHandlers(final ResourceHandlerRegistry registry) {        registry.addResourceHandler("swagger-ui.html")                .addResourceLocations("classpath:/META-INF/resources/");        registry.addResourceHandler("/static/image/**")                .addResourceLocations("file://///home/client/image/")                .setCachePeriod(3600)                .resourceChain(true)                .addResolver(new PathResourceResolver());    }    @Bean    @Override    public AuthenticationManager authenticationManagerBean() throws Exception {        return super.authenticationManagerBean();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        //auth.userDetailsService(memberService);    }    @Bean    public CommonsMultipartResolver multipartResolver() {        CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();        multipartResolver.setDefaultEncoding("UTF-8"); // 파일 인코딩 설정        multipartResolver.setMaxUploadSizePerFile(100 * 1024 * 1024); // 파일당 업로드 크기 제한 (5MB)        return multipartResolver;    }    @Override    protected void configure(HttpSecurity http) throws Exception {        //redis 사용        http                .httpBasic().disable() // rest api 만을 고려하여 기본 설정은 해제하겠습니다.                    .csrf().disable() // csrf 보안 토큰 disable처리.                    .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 토큰 기반 인증이므로 세션 역시 사용하지 않습니다.                    .and()                .authorizeRequests() // 요청에 대한 사용권한 체크                    .antMatchers("/static/**").permitAll()                    .antMatchers(PUBLIC_URI)                        .permitAll()                    .anyRequest()                        .authenticated()                    .and()                    .addFilterBefore(new JwtAuthenticationFilter(jwtTokenProvider ,redisUtil  ,cookieUtil),                        UsernamePasswordAuthenticationFilter.class)                .formLogin()                 .disable();        // JwtAuthenticationFilter를 UsernamePasswordAuthenticationFilter 전에 넣는다    }}