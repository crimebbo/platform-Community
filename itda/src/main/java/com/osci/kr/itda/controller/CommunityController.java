package com.osci.kr.itda.controller;import com.osci.kr.itda.common.controller.ItDaBaseController;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.Board;import com.osci.kr.itda.entity.Interest;import com.osci.kr.itda.repo.FileUploadRepo;import com.osci.kr.itda.serviceimpl.BoardServiceImpl;import com.osci.kr.itda.serviceimpl.CommunityServiceImpl;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.validation.Valid;import java.util.Arrays;import java.util.stream.Stream;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@CrossOrigin(origins = "*" ,allowedHeaders = "*")@RestController@RequestMapping("/rest/api/v1/com")public class CommunityController extends ItDaBaseController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private HttpServletRequest req;    @Autowired    private CommunityServiceImpl communityService;    /**     * 구독중     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/watch/{userid}/{comnm}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> watch(@PathVariable(value = "userid") String userid,                                            @PathVariable(value = "comnm") String comnm) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.watch(userid,comnm);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 구독중     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/unWatch/{userid}/{comnm}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> unWatch(@PathVariable(value = "userid") String userid,                                            @PathVariable(value = "comnm") String comnm) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.unWatch(userid,comnm);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 커뮤니티 단건 조회     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/selectCom/{userid}/{comnm}/{page}/{size}/{sortType}/{sortReplyType}/{flagType}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> selectCom(@PathVariable(value = "userid") String userid,                                                @PathVariable(value = "comnm") String comnm,                                                @PathVariable(value = "page") int page,                                                @PathVariable(value = "size") int size,                                                @PathVariable(value = "sortType") String sortType,                                                @PathVariable(value = "sortReplyType") String sortReplyType,                                                @PathVariable(value = "flagType") String flagType) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.selectCom(userid,comnm,page,size,sortType,sortReplyType,flagType);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 커뮤니티 리스트 조회     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/selectListCom/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> selectComList(@PathVariable(value = "userid") String userid) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.selectComList(userid);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 커뮤니티 모두보기     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/selectCommAll/{sorttype}/{userid}/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> selectCommAll(@PathVariable(value = "sorttype") String sorttype,                                                    @PathVariable(value = "userid") String userid,                                                    @PathVariable(value = "page") int page,                                                    @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.selectCommAllView(sorttype,userid,page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 커뮤니티 모두보기     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/search/{word}/{userid}/{page}/{size}/{sortType}/{sortReplyType}/{flagType}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> serach(@PathVariable(value = "word") String word,                                             @PathVariable(value = "userid") String userid,                                             @PathVariable(value = "page") int page,                                             @PathVariable(value = "size") int size,                                             @PathVariable(value = "sortType") String sortType,                                             @PathVariable(value = "sortReplyType") String sortReplyType,                                             @PathVariable(value = "flagType") String flagType) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = communityService.serach(word,userid,page,size,sortType,sortReplyType,flagType);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }}