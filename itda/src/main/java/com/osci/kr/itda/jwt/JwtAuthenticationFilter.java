package com.osci.kr.itda.jwt;import com.osci.kr.itda.domain.Role;import com.osci.kr.itda.entity.Member;import com.osci.kr.itda.utills.CookieUtil;import com.osci.kr.itda.utills.RedisUtil;import io.jsonwebtoken.ExpiredJwtException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Component;import org.springframework.web.filter.GenericFilterBean;import org.springframework.web.filter.OncePerRequestFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.Collections;import java.util.List;@RequiredArgsConstructorpublic class JwtAuthenticationFilter extends GenericFilterBean {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private  JwtTokenProvider jwtTokenProvider;    @Autowired    private RedisUtil redisUtil;    @Autowired    private CookieUtil cookieUtil;    public JwtAuthenticationFilter(JwtTokenProvider jwtTokenProvider , RedisUtil redisUtil , CookieUtil cookieUtil) {        this.jwtTokenProvider = jwtTokenProvider;        this.redisUtil = redisUtil;        this.cookieUtil = cookieUtil;    }    @Override    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        // 헤더에서 JWT 를 받아옵니다.        HttpServletRequest req = (HttpServletRequest)request;        HttpServletResponse res = (HttpServletResponse)response;        //final Cookie jwtToken = cookieUtil.getCookie(req,JwtTokenProvider.ACCESS_TOKEN_NAME);        String jwtToken = req.getHeader(JwtTokenProvider.ACCESS_TOKEN_NAME);        String userid = null;        String jwt = null;        String refreshJwt = null;        String refreshUserid = null;        try{            if (jwtToken != null ) {                jwt = jwtToken;                if(redisUtil.getData(jwt) != null && (Boolean) redisUtil.getData(jwt)){                    chain.doFilter(req, res);                    return;                }                if(jwtTokenProvider.validateToken(jwt)){                    // 토큰이 유효하면 토큰으로부터 유저 정보를 받아옵니다.                    Authentication authentication = jwtTokenProvider.getAuthentication(jwt);                    // SecurityContext 에 Authentication 객체를 저장합니다.                    SecurityContextHolder.getContext().setAuthentication(authentication);                    res.setHeader(JwtTokenProvider.ACCESS_TOKEN_NAME, jwt);                }            }        }catch (ExpiredJwtException e){           // Cookie refreshToken = cookieUtil.getCookie(req,JwtTokenProvider.REFRESH_TOKEN_NAME);            String refreshToken =  req.getHeader(JwtTokenProvider.REFRESH_TOKEN_NAME);            if(refreshToken!=null){                refreshJwt = refreshToken;            }        }catch(Exception e){            e.printStackTrace();            e.getMessage();        }        try{            if(refreshJwt != null){                refreshUserid = redisUtil.getStrData(refreshJwt);                JwtTokenProvider provider = new JwtTokenProvider(null);                if(refreshUserid.equals(provider.getUserPk(refreshJwt))){                    if(jwtTokenProvider.validateToken(refreshJwt)){                        Member member = new Member();                        member.setRoles(Collections.singletonList(Role.MEMBER.getValue()));                        // 토큰이 유효하면 토큰으로부터 유저 정보를 받아옵니다.                        Authentication authentication = jwtTokenProvider.getAuthentication(jwt);                        // SecurityContext 에 Authentication 객체를 저장합니다.                        SecurityContextHolder.getContext().setAuthentication(authentication);                        String newToken =provider.generateToken(refreshUserid,member.getRoles());//                        Cookie newAccessToken = cookieUtil.createCookie(provider.ACCESS_TOKEN_NAME,newToken);//                        res.addCookie(newAccessToken);                        res.setHeader(provider.ACCESS_TOKEN_NAME, newToken);                    }                }            }        }catch(ExpiredJwtException e){        }        chain.doFilter(req,  res);//        String token = jwtTokenProvider.resolveToken((HttpServletRequest) request);//        // 유효한 토큰인지 확인합니다.//        if (token != null && jwtTokenProvider.validateToken(token)) {//            // 토큰이 유효하면 토큰으로부터 유저 정보를 받아옵니다.//            Authentication authentication = jwtTokenProvider.getAuthentication(token);//            // SecurityContext 에 Authentication 객체를 저장합니다.//            SecurityContextHolder.getContext().setAuthentication(authentication);//        }    }}