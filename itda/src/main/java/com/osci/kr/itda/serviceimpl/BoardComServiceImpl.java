package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.*;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.BoardCommentService;import lombok.AllArgsConstructor;import org.apache.commons.io.FileUtils;import org.apache.commons.io.FilenameUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.time.LocalDateTime;import java.util.*;@Service@Transactional@AllArgsConstructorpublic class BoardComServiceImpl implements BoardCommentService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private BoardCommentRepo boardCommentRepo;    @Autowired    private BoardRepo boardRepo;    @Autowired    private CommentFileuploadReop commentFileuploadReop;    @Autowired    private MembersRepo membersRepo;    @Autowired    private LikeMngRepo likeMngRepo;    @Autowired    private NotiRepo notiRepo;    @Autowired    private NotiServiceImpl notiService;    @Autowired    private MileageRepo mileageRepo;    /**     * 댓글작성     * @param comment     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult write(BoardComment comment, HttpServletRequest req, HttpServletResponse res) throws ItDaExceptionHandler, Exception {        return saveComment(comment, req, res);    }    /**     * 댓글  수정     * @param comment     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public void modify(BoardComment comment, HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{         commentModify(comment,req,res);    }    /**     * 댓글 삭제     * @param cmtid     * @throws ItDaExceptionHandler     * @throws Exception     */    public void commDelete(Long cmtid) throws ItDaExceptionHandler, Exception{        commentDelete(cmtid);    }    /**     * 좋아요     * @param cmtid     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult likeConut(Long cmtid,String userid) throws ItDaExceptionHandler, Exception{        return like(cmtid,userid);    }    /**     * unlikeCount     * @param cmtid     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult unlikeCount(Long cmtid,String userid) throws ItDaExceptionHandler, Exception{        return unlike(cmtid,userid);    }    /**     *  파일업로드     * @param file     * @param num     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult fileupload(MultipartFile file , Long num , HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{        return uploaded(file, (long) num , req , res);    }    /**     * 파일 삭제     * @param fileid     * @param req     * @param res     * @throws ItDaExceptionHandler     * @throws Exception     */    public void fileRemove(Long fileid ,HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{        removeFile(fileid);    }    /**     * 댓글  단건 조회     * @param userid     * @param cmtid     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult selectOne(String userid,Long cmtid) throws ItDaExceptionHandler, Exception{        return selectOneComment(userid,cmtid);    }    private ItDaResult selectOneComment(String userid , Long cmtid) throws Exception{        ItDaResult res = new ItDaResult();        if(boardCommentRepo.findByCmtid(cmtid).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        /**         * 게시판 정보         */        Optional<BoardComment> comment = boardCommentRepo.findByCmtid(cmtid);        BoardComment e = comment.get();        HashMap comm = new HashMap();        comm.put("replyUserid",e.getCmtuserid());        comm.put("replyNickName",e.getCmtnickname());        comm.put("replyIdx",e.getReplyidx().toString());        comm.put("cmtID",e.getCmtid().toString());        comm.put("boardNum",e.getBoardnum().toString());        comm.put("reply",e.getCmtcontent());        comm.put("photo",e.getPhoto());        comm.put("likeCount",e.getCmtlike());        comm.put("commentFiles",getCommentFiles(e.getCmtid(),"N"));        comm.put("statelike" , !userid.equals("undefined") ? getIsLikeState(e.getCmtid(),1,userid) : false);        HashMap obj = new HashMap();        obj.put("reply",comm);        res.setResultData(obj);        return  res;    }    private Boolean getIsLikeState(Long id ,int type,String userid) throws Exception{        Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndTypeAndUserid(Long.valueOf(id),type,userid);        Boolean ishit  =lm.equals(Optional.empty()) ? false : lm.get().isIslikehit();        return ishit;    }    private List<CommentFileupload> getCommentFiles(Long cmtid,String yndel){        List<CommentFileupload> commentFiles =  commentFileuploadReop.findByCmtidAndYnDelOrderByRegdateTimeAsc(cmtid,yndel);        return commentFiles;    }    private void removeFile(Long fileid) throws Exception{        Optional<CommentFileupload> file = commentFileuploadReop.findByCmtid(fileid);        CommentFileupload f = file.get();        File deletFiles = new File(f.getFilePath());        if(deletFiles.exists()){            deletFiles.delete();            commentFileuploadReop.deleteById(fileid);        }    }    private ItDaResult uploaded(MultipartFile file , Long cmtid , HttpServletRequest req , HttpServletResponse res) throws Exception {        logger.info("### Comment upload");        ItDaResult ressult = new ItDaResult();        Calendar cal = Calendar.getInstance();        String dateString = String.format("%04d-%02d-%02d", cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH));        Optional<BoardComment> bd = boardCommentRepo.findById(cmtid);        BoardComment entity = bd.get();        String extension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());        UUID uuid = UUID.randomUUID();        String newFileName = uuid.toString() + extension;        File targetFile = new File("/home/client/comment/" + dateString + "/" + cmtid + "/" + entity.getCmtuserid() + "/" + newFileName);        try {            InputStream fileStream = file.getInputStream();            FileUtils.copyInputStreamToFile(fileStream, targetFile);            file.transferTo(targetFile);            ressult.setResultData(saveFile(file ,cmtid ,req ,entity, targetFile.getAbsolutePath().toString() , newFileName));        } catch (IOException e) {            FileUtils.deleteQuietly(targetFile);            e.printStackTrace();        }        return ressult;    }    private CommentFileupload saveFile(MultipartFile file , Long cmtid, HttpServletRequest req, BoardComment entity , String path, String newFileName) throws Exception {        LocalDateTime currentDateTime = LocalDateTime.now();        CommentFileupload upload = CommentFileupload.builder()                .boardnum(entity.getBoardnum())                .filename(newFileName)                .originname(file.getOriginalFilename())                .ext(FilenameUtils.getExtension(file.getOriginalFilename()))                .filesize(file.getSize())                .cmtid(cmtid)                .regdateTime(currentDateTime)                .regiIp(req.getRemoteAddr())                .userid(entity.getCmtuserid())                .filePath(path)                .build();        commentFileuploadReop.save(upload);        return upload;    }    private ItDaResult unlike(Long cmtid,String userid) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        if(boardCommentRepo.findById(cmtid).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<BoardComment> e = boardCommentRepo.findById(cmtid);        BoardComment entity = e.get();        int unlikeCnt = entity.getCmtlike() - 1;        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setCmtlike(unlikeCnt);            e.get().setStatelike(false);            e.get().setRegUpdateTime(currentDateTime);            boardCommentRepo.save(entity);        }        Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndType(cmtid,1);        LikeMng lmEntity = lm.get();        if (e.isPresent()) {            lm.get().setIslikehit(false);            likeMngRepo.save(lmEntity);        }        HashMap map = new HashMap();        map.put("likeCount",unlikeCnt);        map.put("cmtid",entity.getCmtid());        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.undoLikeReply;            Optional<Member> member = membersRepo.findByUserid(entity.getCmtuserid());            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(es.getUserid())                    .mlgCode("D1")                    .mlgType("댓글 Like Undo")                    .mlgRefer(boardRepo.findByNum(entity.getBoardnum()).get().getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        res.setResultData(map);        return res;    }    private ItDaResult like(Long cmtid,String userid) throws ItDaExceptionHandler, Exception{        ItDaResult res = new ItDaResult();        if(boardCommentRepo.findById(cmtid).equals(Optional.empty())){            throw new IllegalArgumentException("cmtID is empty");        }        Optional<BoardComment> e = boardCommentRepo.findById(cmtid);        BoardComment entity = e.get();        int likeCnt = entity.getCmtlike() + 1;        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setCmtlike(likeCnt);            e.get().setStatelike(true);            e.get().setRegUpdateTime(currentDateTime);            boardCommentRepo.save(entity);        }        if(likeMngRepo.findByNumOrcmtidAndType(cmtid,0).equals(Optional.empty())){            LikeMng like = LikeMng.builder()                    .userid(userid)                    .type(1)                    .numOrcmtid(cmtid)                    .islikehit(true)                    .build();            likeMngRepo.save(like);        }else{            Optional<LikeMng> lm = likeMngRepo.findByNumOrcmtidAndType(cmtid,0);            LikeMng lmEntity = lm.get();            if (e.isPresent()) {                lm.get().setIslikehit(true);                likeMngRepo.save(lmEntity);            }        }        HashMap map = new HashMap();        map.put("likeCount",likeCnt);        map.put("cmtid",entity.getCmtid());        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.likeReply;            Optional<Member> member = membersRepo.findByUserid(userid);            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(es.getUserid())                    .mlgCode("D0")                    .mlgType("댓글 Like")                    .mlgRefer(boardRepo.findByNum(entity.getBoardnum()).get().getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        res.setResultData(map);        return res;    }    private void commentDelete(Long cmtid){        if(boardCommentRepo.findById(cmtid).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<BoardComment> e = boardCommentRepo.findById(cmtid);        BoardComment entity = e.get();        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setYnDel("Y");            e.get().setRegUpdateTime(currentDateTime);            boardCommentRepo.save(entity);        }        Optional<Board> eb = boardRepo.findByNum(entity.getBoardnum());        Board bd = eb.get();        if (eb.isPresent()) {            eb.get().setCommentCount(bd.getCommentCount() - 1);            eb.get().setRegUpdateTime(currentDateTime);            boardRepo.save(bd);        }        List<BoardComment> reply = boardCommentRepo.findByReplyidxAndYnDel(cmtid,"N");        for (BoardComment list : reply){            LocalDateTime time = LocalDateTime.now();            list.setYnDel("Y");            list.setRegUpdateTime(time);            boardCommentRepo.save(list);            Optional<Board> sub = boardRepo.findByNum(entity.getBoardnum());            Board bds = sub.get();            if (sub.isPresent()) {                sub.get().setCommentCount(bd.getCommentCount() - 1);                sub.get().setRegUpdateTime(currentDateTime);                boardRepo.save(bds);            }        }        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.delReply;            Optional<Member> member = membersRepo.findByUserid(entity.getCmtuserid());            Member es = member.get();            int point = es.getPoint() + mileag.getValue();            if (member.isPresent()) {                member.get().setPoint(point);                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(es);            }            Mileage mlg = Mileage.builder()                    .userid(es.getUserid())                    .mlgCode("B1")                    .mlgType("댓글삭제")                    .mlgRefer(bd.getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }    }    private void commentModify(BoardComment comment ,HttpServletRequest req, HttpServletResponse res ) throws Exception{        if(boardCommentRepo.findById(comment.getCmtid()).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<BoardComment> e = boardCommentRepo.findById(comment.getCmtid());        BoardComment entity = e.get();        String commentUserid = comment.getCmtuserid();        Optional<Member> em = membersRepo.findByUserid(commentUserid);        Member member = em.get();        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setCmtcontent(comment.getCmtcontent());            e.get().setCmtnickname(comment.getCmtnickname());            e.get().setRegUpdateTime(currentDateTime);            e.get().setPhoto(member.getPhoto());            boardCommentRepo.save(entity);        }    }    private ItDaResult saveComment(BoardComment comment, HttpServletRequest req, HttpServletResponse res ) throws Exception{        ItDaResult result = new ItDaResult();        LocalDateTime currentDateTime = LocalDateTime.now();        Long replyidx = comment.getReplyidx() == null ? 0 : comment.getCmtid();        String commentUserid = comment.getCmtuserid();        Optional<Member> em = membersRepo.findByUserid(commentUserid);        Member member = em.get();        BoardComment bdCom = BoardComment.builder()                .replyidx(replyidx)                .boardnum(comment.getBoardnum())                .boarduserid(comment.getBoarduserid())                .cmtcontent(comment.getCmtcontent())                .boardnickname(comment.getBoardnickname())                .cmtuserid(comment.getCmtuserid())                .cmtnickname(comment.getCmtnickname())                .cmtuseremail(comment.getCmtuseremail())                .regdateTime(currentDateTime)                .cmtlike(comment.getCmtlike())                .photo(member.getPhoto())                .build();        boardCommentRepo.save(bdCom);        if(boardRepo.findByNum(comment.getBoardnum()).equals(Optional.empty())){            throw new IllegalArgumentException("empty");        }        Optional<Board> e = boardRepo.findByNum(comment.getBoardnum());        Board entity = e.get();        if (e.isPresent()) {            e.get().setCommentCount(entity.getCommentCount() + 1);            e.get().setRegUpdateTime(currentDateTime);            boardRepo.save(entity);        }        /**         * 알림         */        try {            Noti noti = new Noti();            noti.setMoveNum(bdCom.getBoardnum());            if(replyidx == 0){                noti.setNotiType("board_reply");                noti.setUserid(comment.getBoarduserid());                noti.setTargetUserid(comment.getCmtuserid());            }else{                Optional<BoardComment> com = boardCommentRepo.findByCmtidAndYnDel(comment.getCmtid(),"N");                BoardComment es = com.get();                noti.setNotiType("comment_reply");                noti.setUserid(es.getCmtuserid());                noti.setTargetUserid(comment.getCmtuserid());            }            noti.setNotiMessage(entity.getTitle());            noti.setNotiUrl(bdCom.getBoardnum().toString());            notiService.sendNoti(noti);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        /**         * 마일리지         */        try {            com.osci.kr.itda.domain.Mileage mileag = com.osci.kr.itda.domain.Mileage.regReply;            int point = member.getPoint() + mileag.getValue();            if (em.isPresent()) {                em.get().setPoint(point);                em.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(member);            }            Mileage mlg = Mileage.builder()                    .userid(entity.getUserid())                    .mlgCode("B0")                    .mlgType("댓글작성")                    .mlgRefer(entity.getTitle())                    .point(mileag.getValue())                    .mlgKind(mileag.getValue() > 0 ? "적립" :"회수")                    .regDateTime(currentDateTime)                    .build();            mileageRepo.save(mlg);        }catch (Exception ex){            ex.getMessage();            logger.info(ex.getMessage());        }        result.setResultData(bdCom);        return result;    }//    private ItDaResult selectOne(String userid , int num) throws Exception{//        ItDaResult res = new ItDaResult();////        if(boardRepo.findByNum(Long.valueOf(num)).equals(Optional.empty())){//            throw new IllegalArgumentException("empty");//        }//        Optional<Board> board = boardRepo.findByNum(Long.valueOf(num));//        Board e = board.get();////        HashMap hm = new HashMap();////        hm.put("board",e);//        res.setResultData(hm);//        return  res;//////    }}