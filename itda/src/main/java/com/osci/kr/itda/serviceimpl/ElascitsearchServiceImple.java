package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.entity.Board;import lombok.AllArgsConstructor;import lombok.RequiredArgsConstructor;;import org.elasticsearch.client.RestHighLevelClient;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.elasticsearch.core.ElasticsearchOperations;import org.springframework.data.elasticsearch.core.query.GetQuery;import org.springframework.stereotype.Service;import java.io.IOException;@AllArgsConstructor@Servicepublic class ElascitsearchServiceImple {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private ElasticsearchOperations elasticsearchOperations;    public void ElasticSearch() throws IOException {        Board board = elasticsearchOperations.queryForObject(GetQuery.getById("1"), Board.class);        logger.info(String.valueOf(board));//        SearchQuery searchQuery = new NativeSearchQueryBuilder()//                .withQuery(QueryBuilders.termsQuery("num",1))//                .build();////        elasticsearchTemplate.queryForPage(searchQuery,Object.class);//        QueryBuilder qb = (QueryBuilder) QueryBuilders.matchQuery("num", 1);////        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query((org.elasticsearch.index.query.QueryBuilder) qb);//        SearchRequest searchRequest = new SearchRequest("mvptest").types("tbl_board").source(searchSourceBuilder);//        RequestOptions options = null;//        SearchResponse response = restHighLevelClient.search(searchRequest,options);//        logger.info(String.valueOf(response));    }}