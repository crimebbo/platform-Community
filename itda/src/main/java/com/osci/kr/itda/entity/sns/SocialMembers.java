package com.osci.kr.itda.entity.sns;import com.fasterxml.jackson.annotation.JsonCreator;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.AccessLevel;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import org.springframework.hateoas.RepresentationModel;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import javax.persistence.*;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;@Data@NoArgsConstructor(access = AccessLevel.PUBLIC)@Entity(name="tbl_social_user")@Table(uniqueConstraints = @UniqueConstraint(columnNames = {"userid" }),        indexes = {@Index(columnList="userid"),@Index(columnList="nickname")})public class SocialMembers extends RepresentationModel<SocialMembers> implements UserDetails {    @Id    @GeneratedValue(strategy= GenerationType.IDENTITY)    @Column(length = 11, nullable = false)    private Long snsid;    @Column(length = 100, nullable = true)    private Long memid;    @Column(length = 100, nullable = false)    private String userid;    @Column(length = 100, nullable = true)    private int snstype;    @Column(length = 255, nullable = false, unique=true)    private String nickname;    @Column(length = 100, nullable = true)    private String authEmail;    @Column(name="roles")    @ElementCollection(targetClass=String.class,fetch = FetchType.EAGER)    private List<String> roles;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return this.roles.stream()                .map(SimpleGrantedAuthority::new)                .collect(Collectors.toList());    }    @Override    public String getPassword() {        return null;    }    @Override    public String getUsername() {        return userid;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }    @Builder    @JsonCreator    private SocialMembers(@JsonProperty("memid") Long memid, @JsonProperty("userid") String userid ,                          @JsonProperty("snstype") int snstype ,  @JsonProperty("authEmail") String authEmail,                          @JsonProperty("roles") List<String> roles ,  @JsonProperty("nickname") String nickname ){        this.memid = memid;        this.userid = userid;        this.snstype = snstype;        this.authEmail = authEmail;        this.roles = roles;        this.nickname = nickname;    }}