package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.domain.Role;import com.osci.kr.itda.entity.*;import com.osci.kr.itda.entity.admin.SupportAdmin;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.MyPageService;import com.osci.kr.itda.utills.MailSenderUtil;import lombok.AllArgsConstructor;import org.apache.commons.io.FileUtils;import org.apache.commons.io.FilenameUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.*;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.time.LocalDateTime;import java.util.*;import java.util.concurrent.atomic.AtomicInteger;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@Service@Transactional@AllArgsConstructorpublic class MyPageServiceImpl implements MyPageService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MembersRepo membersRepo;    @Autowired    private SocialMemberRepo socialMemberRepo;    @Autowired    private MailSenderUtil mailSenderUtil;    @Autowired    private BoardRepo boardRepo;    @Autowired    private MemberMngIDRepo memberMngIDRepo;    @Autowired    private BoardCommentRepo boardCommentRepo;    @Autowired    private ScrapRepo scrapRepo;    @Autowired    private MileageRepo mileageRepo;    @Autowired    private UserServiceImpl userService;    @Autowired    private FileUploadRepo fileUploadRepo;    @Autowired    private AdminReqRepo adminReqRepo;    @Autowired    private NotiRepo notiRepo;    @Autowired    private CommunityListRepo communityListRepo;    @Autowired    private CommunityRepo communityRepo;    /**     * 회원가입 이메일 체크     * @param email     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult authEmail(String userType ,String userid,String email,HttpServletRequest req) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        Optional<Member> member = membersRepo.findByUserid(userid);        if(member.equals(Optional.empty())){            result.setResultMsg("userid");            result.setResultCode(404);            return result;        }//        if(!membersRepo.findByEmail(email).equals(Optional.empty())){//            throw new IllegalArgumentException("email");//        }//        Optional<SocialMembers> social = socialMemberRepo.findByUserid(userid);//        if(social.equals(Optional.empty())){//            result.setResultMsg("FAIL, ID IS NOT FOUND");//            result.setResultCode(404);//            return result;//        }        //SocialMembers s = social.get();        Member m = member.get();        UUID uuid = UUID.randomUUID();        if(userType.equals("ROLE_USER")){            if(m.getEmail() != null && m.getEmail().equals(email) && m.getEmailVerified() !=null && m.getEmailVerified().equals("Y")){                throw new IllegalArgumentException("already");            }        }        if(member.isPresent()) {            member.get().setUserid(member.get().getUserid());            member.get().setEmail(email);            member.get().setEmailCheckToken(uuid.toString());            membersRepo.save(member.get());        }        /**         * 이메일 인증 토큰 보내기         */        sinUpEmailSenderAuth(m,uuid,req);        return result;    }    /**     * 개인정보 수정하기     * @param userid     * @param nickname     * @param email     * @param pw     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult userModify(MultipartFile multipartFile,String userid , String nickname, String email , String pw,HttpServletRequest req  ,HttpServletResponse res) throws ItDaExceptionHandler, Exception {        ItDaResult result = new ItDaResult();        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();        LocalDateTime currentDateTime = LocalDateTime.now();        Optional<Member> member = membersRepo.findByUserid(userid);        Member mem = member.get();        if(!mem.getNickname().equals(nickname) && !membersRepo.findByNickname(nickname).equals(Optional.empty())){            throw new IllegalArgumentException("already_nickname");        }        if(membersRepo.findByEmail(email).equals(Optional.empty())){            throw new IllegalArgumentException("not_email");        }        if(!membersRepo.findByUserid(userid).equals(Optional.empty())){            if(mem.getEmailVerified() == null || !mem.getEmailVerified().equals("Y")){                throw new IllegalArgumentException("auth_email");            }            if(member.isPresent()){                member.get().setUserid(member.get().getUserid());                member.get().setEmail(email);                member.get().setNickname(nickname);                member.get().setPassword(passwordEncoder.encode(pw));                member.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(member.get());            }        }        boardRepo.findByUseridAndYnDel(userid,"N").forEach(board ->{            Optional<Board> bd = boardRepo.findByNum(board.getNum());            Board entity = bd.get();            if(bd.isPresent()){                bd.get().setUserid(entity.getUserid());                bd.get().setNickname(nickname);                bd.get().setRegUpdateTime(currentDateTime);                boardRepo.save(bd.get());            }        });        boardCommentRepo.findByCmtuseridAndYnDel(userid,"N").forEach(comment ->{            Optional<BoardComment> com = boardCommentRepo.findById(comment.getCmtid());            if(com.isPresent()){                com.get().setCmtnickname(nickname);                com.get().setRegUpdateTime(currentDateTime);                boardCommentRepo.save(com.get());            }        });        /**         * 이미지 업로드         */        ItDaResult rt = uploaded(multipartFile,userid,req,res);        FileUpload m = (FileUpload) rt.getResultData();        String filenm = m.getFilename();        HashMap hm = new HashMap();        Optional<Member> e = membersRepo.findByUserid(userid);        Member userEntity = e.get();        if(e.isPresent()){            e.get().setPhoto("http://devitda.osci.kr:8099/itda/static/image/"+ userEntity.getUserid() + "/" + filenm);            e.get().setRegisterUpdatetime(currentDateTime);            membersRepo.save(e.get());        }        // SocialMembers sEntity = s.get();        hm.put("file_info",rt.getResultData());        hm.put("member",userEntity);        result.setResultData(hm);        return result;    }    /**     * 회원탈퇴/비밀번호 확인     * @param userid     * @param pw     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult confirmPW(String userid ,String pw) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();        Optional<Member> member = membersRepo.findByUserid(userid);        Member mem = member.get();        if(!passwordEncoder.matches(pw,mem.getPassword()) ){            throw new IllegalArgumentException("password");        }        return result;    }    /**     * 회원탈퇴     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult memberOut(String userid) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        LocalDateTime currentDateTime = LocalDateTime.now();        Optional<Member> member = membersRepo.findByUserid(userid);        Member mem = member.get();        if(member.isPresent()){            member.get().setUserid(mem.getUserid());            member.get().setYnJoin("N");            member.get().setRegisterUpdatetime(currentDateTime);            membersRepo.save(member.get());        }        boardRepo.findByUseridAndYnDel(userid,"N").forEach(board ->{           Optional<Board> bd = boardRepo.findByNum(board.getNum());           Board entity = bd.get();           if(bd.isPresent()){               bd.get().setUserid(entity.getUserid());               bd.get().setYnDel("Y");               bd.get().setRegUpdateTime(currentDateTime);               boardRepo.save(bd.get());           }        });        Optional<MemberManageID> memid = memberMngIDRepo.findByUserid(userid);        MemberManageID mid = memid.get();        if(memid.isPresent()){            memid.get().setUserid(userid);            memid.get().setStatus(1);            memberMngIDRepo.save(memid.get());        }        return result;    }    /**     * 알림내역     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult notiList(String userid,int page , int size) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap hm = new HashMap();        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "notiDatetime");        Page<Noti> notiList = notiRepo.findByUserid(userid,pageable);        List<Noti> list = notiList.getContent();        List<HashMap> convertList = new ArrayList<>();        list.forEach(noti -> {            HashMap map = new HashMap();            if(noti.getNotiType().equals("board_reply")){                map.put("noti_ty" ,"내 게시물");                map.put("noti_title",noti.getNotiMessage() +"에 답변이 달렸습니다.");                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("comment_reply")){                map.put("noti_ty" ,"내 댓글");                map.put("noti_title",noti.getNotiMessage() +"에 댓글이 달렸습니다.");                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("email")){                map.put("noti_ty" ,"이메일 인증");                map.put("noti_title","마이페이지에서 이메일을 인증해주세요");                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("Notice")){                map.put("noti_ty" ,"공지사항");                map.put("noti_title","#"+noti.getNotiMessage() +"에 새 공지사항이 있습니다.");                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("event")){                map.put("noti_ty" ,"이벤트");                map.put("noti_title","#"+noti.getNotiMessage() +"에 새 이벤트가 있습니다.");                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("point")){                map.put("noti_ty" ,"마일리지");                map.put("noti_title",noti.getNotiMessage());                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("role")){                map.put("noti_ty" ,"권한변경");                map.put("noti_title",noti.getNotiMessage());                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }else if(noti.getNotiType().equals("role_rollback")){                map.put("noti_ty" ,"권한변경");                map.put("noti_title",noti.getNotiMessage());                map.put("noti_num",noti.getMoveNum());                map.put("noti_date" , noti.getNotiDatetime());                convertList.add(map);            }        });        hm.put("noti_list",convertList);        hm.put("PAGE_SIZE",notiList.getSize());        hm.put("TOTAL_PAGE",notiList.getTotalPages());        hm.put("TOTAL_COUNT",notiList.getTotalElements());        hm.put("NEXT",notiList.nextPageable());        result.setResultData(hm);        return result;    }    /**     * 게시물 관리     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult BoardMng(String userid,int page,int size,String ty) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        /**         * 최근작성게시물         */        HashMap resMap = new HashMap();        if("post".equals(ty)){            Pageable pageable_board = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            Page<Board> restBoards = boardRepo.findByUseridAndYnDel(userid,"N",pageable_board);            List<Board> boards = restBoards.getContent();            List ob = new ArrayList();            resMap.put("board_list",boards);            resMap.put("reply_list",ob);            resMap.put("scrap_list",ob);            resMap.put("PAGE_SIZE",restBoards.getSize());            resMap.put("TOTAL_PAGE",restBoards.getTotalPages());            resMap.put("TOTAL_COUNT",restBoards.getTotalElements());            resMap.put("NEXT",restBoards.nextPageable());            result.setResultData(resMap);        }else if("reply".equals(ty)){            Pageable pageable_reply = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            Page<BoardComment> resultReply = boardCommentRepo.findByCmtuseridAndYnDel(userid,"N",pageable_reply);            List<BoardComment> replys = resultReply.getContent();            List ob = new ArrayList();            resMap.put("reply_list",replys);            resMap.put("board_list",ob);            resMap.put("scrap_list",ob);            resMap.put("PAGE_SIZE",resultReply.getSize());            resMap.put("TOTAL_PAGE",resultReply.getTotalPages());            resMap.put("TOTAL_COUNT",resultReply.getTotalElements());            resMap.put("NEXT",resultReply.nextPageable());            result.setResultData(resMap);        }else{            /**             * 스크랩  게시물             */            Pageable pageable_scrap = PageRequest.of(page, size, Sort.Direction.DESC, "regDateTime");            Page<Scrap> scraps = scrapRepo.findByUseridAndScrYn(userid,"Y",pageable_scrap);            List<Board> setScrap = new ArrayList<>();            for(Scrap scrap : scraps.getContent()){                Optional<Board> board =  boardRepo.findByNumAndYnDel(scrap.getBoardNum(),"N");                   if(!board.equals(Optional.empty())){                       Board es = board.get();                       setScrap.add(es);                   }            }            List ob = new ArrayList();            resMap.put("scrap_list",setScrap);            resMap.put("board_list",ob);            resMap.put("reply_list",ob);            resMap.put("PAGE_SIZE",scraps.getSize());            resMap.put("TOTAL_PAGE",scraps.getTotalPages());            resMap.put("TOTAL_COUNT",scraps.getTotalElements());            resMap.put("NEXT",scraps.nextPageable());            result.setResultData(resMap);        }        return result;    }    /**     * 마일리지 관리     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult pointMng(String userid,int page,int size) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        /**         * 최근작성게시물         */        HashMap resMap = new HashMap();        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regDateTime");        Page<Mileage> resultMileage = mileageRepo.findByUserid(userid,pageable);        List<Mileage> Mileages = resultMileage.getContent();        AtomicInteger plusPoint = new AtomicInteger();        AtomicInteger minusPoint = new AtomicInteger();        List<Mileage> mileageslist = mileageRepo.findByUserid(userid);        mileageslist.forEach(point -> {            if(point.getPoint() > 0){                plusPoint.addAndGet(point.getPoint());            }else{                minusPoint.addAndGet(Math.abs(point.getPoint()));            }        });        int total_point = membersRepo.findByUserid(userid).get().getPoint();        resMap.put("POINT_PLUS",plusPoint);        resMap.put("POINT_MINUS",minusPoint);        resMap.put("POINT_TOTAL",Integer.parseInt(String.valueOf(plusPoint)) - Integer.parseInt(String.valueOf(minusPoint)));        resMap.put("POINT_LIST",Mileages);        resMap.put("PAGE_SIZE",resultMileage.getSize());        resMap.put("TOTAL_PAGE",resultMileage.getTotalPages());        resMap.put("TOTAL_COUNT",resultMileage.getTotalElements());        resMap.put("NEXT",resultMileage.nextPageable());        result.setResultData(resMap);        return result;    }    /**     * 마일리지 관리     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult boardAdminMng(String userid,String ty,String flag,int page,int size) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap resMap = new HashMap();        List<SupportAdmin> admins = adminReqRepo.findByUseridOrderByRegdateTimeDesc(userid);        if("all".equals(ty) && "all".equals(flag)){            String flagType = "3,5";            List<String> flagTypes = Arrays.asList(flagType.split(","));            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            Page<Board> boards =boardRepo.findByUseridAndYnDelAndFlagIn(userid,"N",flagTypes,pageable);            List<Board> Board = boards.getContent();            resMap.put("list",Board);            resMap.put("PAGE_SIZE",boards.getSize());            resMap.put("TOTAL_PAGE",boards.getTotalPages());            resMap.put("TOTAL_COUNT",boards.getTotalElements());            resMap.put("NEXT",boards.nextPageable());        }else if(!"all".equals(ty) && "all".equals(flag)){            String flagType = "3,5";            List<String> flagTypes = Arrays.asList(flagType.split(","));            List<Board> boardList = new ArrayList<>();            communityRepo.findByComNm(ty).forEach(com ->{                if(getBoard(com.getBoardNum()) != null){                    Board bd =getBoard(com.getBoardNum());                    if(bd.getFlag().equals("3") || bd.getFlag().equals("5")){                        boardList.add(bd);                    }                }            });            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regDateTime");            int start = (int) pageable.getOffset();            int end = (start + pageable.getPageSize()) > boardList.size() ? boardList.size() : (start + pageable.getPageSize());            Page<Board> results = new PageImpl<Board>(boardList.subList(start,end), pageable,boardList.size());            List<Board> list = results.getContent();            resMap.put("list",list);            resMap.put("PAGE_SIZE",results.getSize());            resMap.put("TOTAL_PAGE",results.getTotalPages());            resMap.put("TOTAL_COUNT",results.getTotalElements());            resMap.put("NEXT",results.nextPageable());        }else if("all".equals(ty) && !"all".equals(flag)){            List<Board> boardList = new ArrayList<>();            adminReqRepo.findByUseridAndProgressCode(userid,"1").forEach(admin->{                communityRepo.findByComNm(admin.getInterest()).forEach(com ->{                    if(getBoard(com.getBoardNum()) != null){                        Board bd =getBoard(com.getBoardNum());                        if(bd.getFlag().equals(flag)){                            boardList.add(bd);                        }                    }                });            });            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regDateTime");            int start = (int) pageable.getOffset();            int end = (start + pageable.getPageSize()) > boardList.size() ? boardList.size() : (start + pageable.getPageSize());            Page<Board> results = new PageImpl<Board>(boardList.subList(start,end), pageable,boardList.size());            List<Board> list = results.getContent();            resMap.put("list",list);            resMap.put("PAGE_SIZE",results.getSize());            resMap.put("TOTAL_PAGE",results.getTotalPages());            resMap.put("TOTAL_COUNT",results.getTotalElements());            resMap.put("NEXT",results.nextPageable());        }else{            List<Board> boardList = new ArrayList<>();                communityRepo.findByComNm(ty).forEach(com ->{                    if(getBoard(com.getBoardNum()) != null){                        Board bd =getBoard(com.getBoardNum());                        if(bd.getFlag().equals(flag)){                            boardList.add(bd);                        }                    }                });            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regDateTime");            int start = (int) pageable.getOffset();            int end = (start + pageable.getPageSize()) > boardList.size() ? boardList.size() : (start + pageable.getPageSize());            Page<Board> results = new PageImpl<Board>(boardList.subList(start,end), pageable,boardList.size());            List<Board> list = results.getContent();            resMap.put("list",list);            resMap.put("PAGE_SIZE",results.getSize());            resMap.put("TOTAL_PAGE",results.getTotalPages());            resMap.put("TOTAL_COUNT",results.getTotalElements());            resMap.put("NEXT",results.nextPageable());        }        resMap.put("commuity_comboBoxlist",admins);        result.setResultData(resMap);        return result;    }    private Board getBoard(Long num){        Optional<Board> bd = boardRepo.findByNumAndYnDel(num,"N");        if(!bd.equals(Optional.empty())){            Board board = bd.get();            return board;        }else{            return null;        }    }    /**     * 커뮤니티 관리자 지원     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult adminReq(String userid,String nm) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        LocalDateTime currentDateTime = LocalDateTime.now();        HashMap map = new HashMap();        if(communityListRepo.findByComNm(nm).equals(Optional.empty())){            throw new IllegalArgumentException("not_community");        }        if(!adminReqRepo.findByUseridAndInterest(userid,nm).equals(Optional.empty())){           String code = adminReqRepo.findByUseridAndInterest(userid,nm).get().getProgressCode();            if(code.equals("1")){                throw new IllegalArgumentException("existRoleAdmin");            }else if(code.equals("0")){                throw new IllegalArgumentException("ongoing");            }        }        List<Board> boards =  boardRepo.findByUseridAndYnDel(userid,"N");        int boardSize = boards.size();        List<BoardComment> comments = boardCommentRepo.findByCmtuseridAndYnDel(userid,"N");        int commentsSize = comments.size();//        if(boardSize < 15 && commentsSize < 30){//            throw new IllegalArgumentException("notRequirement");//        }        if(boardSize < 1 && commentsSize < 1){            throw new IllegalArgumentException("notRequirement");        }        if(adminReqRepo.findByInterest(nm).equals(Optional.empty())){            SupportAdmin admin = SupportAdmin.builder()                    .interest(nm)                    .progress("승인")                    .progressCode("1")                    .userid(userid)                    .userRole("ROLE_ADMIN")                    .regdateTime(currentDateTime)                    .build();            adminReqRepo.save(admin);            map.put("list",admin);            Optional<Member> members = membersRepo.findByUserid(userid);            Member mem = members.get();            List<String> list = new ArrayList<>();;            list.add(Role.ADMIN.getValue());            if(members.isPresent()){                members.get().setId(mem.getId());                members.get().setRoles(list);                members.get().setUserid(userid);                members.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(members.get());            }            Noti nt = Noti.builder()                    .userid(userid)                    .targetUserid("admin")                    .notiMessage(nm + " 에 관리자 권한이 부여되었습니다.")                    .notiType("role")                    .notiDatetime(currentDateTime)                    .build();            notiRepo.save(nt);        }else{            SupportAdmin admin = SupportAdmin.builder()                    .interest(nm)                    .progress("검토 진행중")                    .progressCode("0")                    .userid(userid)                    .userRole("ROLE_USER")                    .regdateTime(currentDateTime)                    .build();            adminReqRepo.save(admin);            map.put("list",admin);        }        result.setResultData(map);        return result;    }    /**     * 커뮤니티 관리자 지원 새로고침     * @param page     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult reqListRefresh(int page,int size) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");        Page<SupportAdmin> admins = adminReqRepo.findAll(pageable);        List<SupportAdmin> list = admins.getContent();        map.put("list", list);        map.put("PAGE_SIZE",admins.getSize());        map.put("TOTAL_PAGE",admins.getTotalPages());        map.put("TOTAL_COUNT",admins.getTotalElements());        map.put("NEXT",admins.nextPageable());        result.setResultData(map);        return result;    }    /**     * 관리자 리스트 조회     * @param page     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult selecMembertList(String userid,String nmTy,String progressTy,int page,int size) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        Page<SupportAdmin> admins =null;        //Pageable pageable = PageRequest.of(page, size, Sort.Direction.ASC, sortType.equals("0") ? "likeCount" : "num");        List<SupportAdmin> comboList = adminReqRepo.findByUseridOrderByRegdateTimeDesc(userid);        if(nmTy.equals("all") && progressTy.equals("all")){            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            admins = adminReqRepo.findAll(pageable);        }else if(nmTy.equals("all") && !progressTy.equals("all")){            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            admins = adminReqRepo.findByProgressCode(progressTy,pageable);        }else if(!nmTy.equals("all") && progressTy.equals("all")){            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            admins = adminReqRepo.findByInterest(nmTy,pageable);        }else{            Pageable pageable = PageRequest.of(page, size, Sort.Direction.DESC, "regdateTime");            admins = adminReqRepo.findByInterestAndProgressCode(nmTy,progressTy,pageable);        }        List<SupportAdmin> list = admins.getContent();        List<HashMap> convertList = new ArrayList<>();        list.forEach(admin -> {            HashMap adminMap = new HashMap();            String nickName =  membersRepo.findByUserid(admin.getUserid()).get().getNickname();            adminMap.put("adminid",admin.getAdminid());            adminMap.put("userid",admin.getUserid());            adminMap.put("nickname",nickName);            adminMap.put("interest",admin.getInterest());            adminMap.put("progress",admin.getProgress());            adminMap.put("progress_code",admin.getProgressCode());            adminMap.put("role",admin.getUserRole());            adminMap.put("regDatetime",admin.getRegdateTime());            adminMap.put("regupDatetime",admin.getRegUpdateTime());            adminMap.put("msg",admin.getMsg());            convertList.add(adminMap);        });        map.put("commuity_comboBoxlist",comboList);        map.put("list", convertList);        map.put("PAGE_SIZE",admins.getSize());        map.put("TOTAL_PAGE",admins.getTotalPages());        map.put("TOTAL_COUNT",admins.getTotalElements());        map.put("NEXT",admins.nextPageable());        result.setResultData(map);        return result;    }    /**     * 권한 제어     * @param userid     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult authCtl(String userid,String ty,String nm,String msg) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        LocalDateTime currentDateTime = LocalDateTime.now();        int cnt = adminReqRepo.findByInterestOrderByAdminid(nm).size();        if(cnt > 10 ){            throw new IllegalArgumentException("exceedAdmin");        }        /**         * 승인         */        if("1".equals(ty)){            Optional<SupportAdmin> sa = adminReqRepo.findByUseridAndInterest(userid,nm);            SupportAdmin e = sa.get();            if(sa.isPresent()){                sa.get().setInterest(nm);                sa.get().setRegUpdateTime(currentDateTime);                sa.get().setProgress("승인");                sa.get().setProgressCode("1");                sa.get().setUserRole("ROLE_ADMIN");                adminReqRepo.save(sa.get());            }            Optional<Member> members = membersRepo.findByUserid(userid);            Member mem = members.get();            List<String> list = new ArrayList<>();;            list.add(Role.ADMIN.getValue());            if(members.isPresent()){                members.get().setId(mem.getId());                members.get().setRoles(list);                members.get().setUserid(userid);                members.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(members.get());            }            Noti nt = Noti.builder()                    .userid(userid)                    .targetUserid("admin")                    .notiMessage(nm + "에 관리자 권한이 부여되었습니다.")                    .notiType("role")                    .notiDatetime(currentDateTime)                    .build();            notiRepo.save(nt);        }        /**         * 거절         */        else if("2".equals(ty)){            Optional<SupportAdmin> sa = adminReqRepo.findByUseridAndInterest(userid,nm);            SupportAdmin e = sa.get();            if(sa.isPresent()){                sa.get().setInterest(nm);                sa.get().setRegUpdateTime(currentDateTime);                sa.get().setProgress("거절");                sa.get().setProgressCode("2");                sa.get().setUserRole("ROLE_USER");                sa.get().setMsg(msg);                adminReqRepo.save(sa.get());            }        }else{            Optional<SupportAdmin> sa = adminReqRepo.findByUseridAndInterest(userid,nm);            SupportAdmin e = sa.get();            if(sa.isPresent()){                sa.get().setInterest(nm);                sa.get().setMsg(nm + " 에 관리자 권한이 회수되었습니다.");                sa.get().setRegUpdateTime(currentDateTime);                sa.get().setProgress("권한회수");                sa.get().setUserRole("ROLE_USER");                sa.get().setProgressCode("3");                adminReqRepo.save(sa.get());           }            Optional<Member> members = membersRepo.findByUserid(userid);            Member mem = members.get();            List<String> list = new ArrayList<>();;            list.add(Role.MEMBER.getValue());            if(members.isPresent()){                members.get().setId(mem.getId());                members.get().setRoles(list);                members.get().setUserid(userid);                members.get().setRegisterUpdatetime(currentDateTime);                membersRepo.save(members.get());            }            Noti nt = Noti.builder()                    .userid(userid)                    .targetUserid("admin")                    .notiMessage(nm + " 에 관리자 권한이 회수되었습니다.")                    .notiType("role_rollback")                    .notiDatetime(currentDateTime)                    .build();            notiRepo.save(nt);        }        result.setResultData(map);        return result;    }    private void sinUpEmailSenderAuth(Member member , UUID token , HttpServletRequest req){        try{            mailSenderUtil.sinUpEmailSender(member ,token.toString(),req);        }catch (Exception e){            throw new IllegalArgumentException("Auth : Mail Send Fail." + e.getMessage());        }    }    private ItDaResult uploaded(MultipartFile file , String userid , HttpServletRequest req , HttpServletResponse res) throws Exception {        logger.info("### upload");        ItDaResult ressult = new ItDaResult();        Calendar cal = Calendar.getInstance();        Optional<Member> mem = membersRepo.findByUserid(userid);        Member entity = mem.get();        String extension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());        UUID uuid = UUID.randomUUID();        String newFileName = uuid.toString() + extension;        File targetFile = new File("/home/client/image/" + entity.getUserid() + "/" + newFileName);        try {            InputStream fileStream = file.getInputStream();            FileUtils.copyInputStreamToFile(fileStream, targetFile);            file.transferTo(targetFile);            ressult.setResultData(saveFile(file ,userid ,req ,entity, targetFile.getAbsolutePath().toString() , newFileName));        } catch (IOException e) {            FileUtils.deleteQuietly(targetFile);            e.printStackTrace();        }        return ressult;    }    private FileUpload saveFile(MultipartFile file , String userid, HttpServletRequest req,Member member , String path,String newFileName) throws Exception {        LocalDateTime currentDateTime = LocalDateTime.now();        FileUpload upload = FileUpload.builder()                .filename(newFileName)                .originname(file.getOriginalFilename())                .ext(FilenameUtils.getExtension(file.getOriginalFilename()))                .filesize(file.getSize())                .regdateTime(currentDateTime)                .memid(member.getId())                .num(Long.parseLong("999999"))                .regiIp(req.getRemoteAddr())                .userid(member.getUserid())                .title("profile")                .filePath(path)                .build();        fileUploadRepo.save(upload);        return upload;    }}