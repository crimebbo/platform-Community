package com.osci.kr.itda.controller;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.osci.kr.itda.common.controller.ItDaBaseController;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.entity.Member;import com.osci.kr.itda.entity.sns.FaceBookUser;import com.osci.kr.itda.jwt.JwtTokenProvider;import com.osci.kr.itda.service.SocialUserService;import com.osci.kr.itda.serviceimpl.SocialUserServiceImpl;import com.osci.kr.itda.serviceimpl.UserServiceImpl;import com.osci.kr.itda.utills.CookieUtil;import com.osci.kr.itda.utills.RedisUtil;import io.jsonwebtoken.Claims;import io.jsonwebtoken.Jws;import io.jsonwebtoken.Jwts;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.RestTemplate;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import javax.validation.Valid;import java.io.IOException;import java.io.PrintWriter;import java.net.URI;import java.net.URISyntaxException;import java.util.Date;import java.util.HashMap;import java.util.concurrent.TimeUnit;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@CrossOrigin(origins = "*" ,allowedHeaders = "*")@RestController@RequestMapping("/api/v1/auth")public class LoginController extends ItDaBaseController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private UserServiceImpl userService;    @Autowired    private SocialUserServiceImpl socialUserService;    @Autowired    private CookieUtil cookieUtil;    @Autowired    private RedisUtil redisUtil;    @Autowired    private JwtTokenProvider jwtTokenProvider;    /**     * 로그인     * @param mem_userid     * @param mem_password     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/signIn/{userid}/{password}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> login(@PathVariable(value = "userid") String mem_userid ,                                            @PathVariable(value = "password") String mem_password,                                            HttpSession session,HttpServletResponse res ,HttpServletRequest req) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = userService.signIn(mem_userid,mem_password,req,res);            logger.info("loginResult : " + result);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("login fail ==== " + e.getMessage());            result.setErrorCode(e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.OK);    }    /**     * 소셜 로그인     * @param obj     * @param session     * @param res     * @return     * @throws ItDaExceptionHandler     */    @PostMapping(value = "/socialSignIn", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> socialSignIn(@Valid @RequestBody Object obj,                                                   HttpSession session,                                                   HttpServletRequest req,                                                   HttpServletResponse res) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = socialUserService.soicalSignIn(obj,req,res);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.OK);    }    /**     * 로그아웃     * @param request     * @return     * @throws ItDaExceptionHandler     */    @RequestMapping(value = {"/logout"}, method = RequestMethod.GET)    public ResponseEntity<ItDaResult> logout(HttpServletRequest request) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        try{            result = userService.logout(request);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("login fail ==== " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.OK);    }    /**     * 회원가입 이메일 체크     * @param token     * @param email     * @return     * @throws ItDaExceptionHandler     */    @GetMapping(value = "/check-email-token/{token}/{email}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<Object> emailCheck(@PathVariable(value = "token") String token ,HttpServletResponse response,                                            @PathVariable(value = "email") String email) throws ItDaExceptionHandler, IOException, URISyntaxException {        ItDaResult result = new ItDaResult();        HttpHeaders httpHeaders = new HttpHeaders();        try{            result = userService.emailCheck(token,email);            MsgShow(response);        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("email check fail ==== " + e.getMessage());        }        return new ResponseEntity<>(httpHeaders, HttpStatus.SEE_OTHER);    }    /**     * 아이디 비번 찾기     * @param email     * @param response     * @return     * @throws ItDaExceptionHandler     * @throws IOException     * @throws URISyntaxException     */    @GetMapping(value = "/find-id/{email}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> findById(@PathVariable(value = "email") String email ,HttpServletResponse response) throws ItDaExceptionHandler, IOException, URISyntaxException {        ItDaResult result = new ItDaResult();        try{            result = userService.findById(email);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("email check fail ==== " + e.getMessage());        }        return new ResponseEntity<>(result, HttpStatus.OK);    }    @GetMapping(value = "/changePw/{userid}/{pw}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> changePw(@PathVariable(value = "userid") String userid ,                                               HttpServletRequest req,                                               @PathVariable(value = "pw") String pw) throws ItDaExceptionHandler, IOException, URISyntaxException {        ItDaResult result = new ItDaResult();        HttpHeaders httpHeaders = new HttpHeaders();        try{            result = userService.changePw(userid,pw,req);            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("error Change Password ==== " + e.getMessage());        }        return new ResponseEntity<>(result, HttpStatus.OK);    }    private void MsgShow(HttpServletResponse response) throws IOException {        response.setContentType("text/html; charset=UTF-8");        PrintWriter out = response.getWriter();        out.println("<script>alert('이메일 인증이 완료되었습니다.'); location.href='http://devitda.osci.kr:3000/auth/login';</script>");        out.flush();    }}