package com.osci.kr.itda.controller;import com.osci.kr.itda.common.controller.ItDaBaseController;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.service.MyPageService;import com.osci.kr.itda.serviceimpl.MyPageServiceImpl;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@CrossOrigin(origins = "*" ,allowedHeaders = "*")@RestController@RequestMapping("/rest/api/v1/mypage")public class MyPageController extends ItDaBaseController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MyPageServiceImpl myPageService;    /**     * 메일 인증하기     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/authEmail/{userType}/{userid}/{email}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> authEmail(@PathVariable(value = "userType") String userType,                                                @PathVariable(value = "userid") String userid,                                                @PathVariable(value = "email") String email,                                                HttpServletRequest req) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.authEmail(userType,userid,email,req);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 개인정보 수정하기     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @PostMapping(value = "/myinfo/modify/{userid}/{nickname}/{email}/{pw}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> userModify(@RequestParam("file") MultipartFile multipartFile,                                                @PathVariable(value = "userid") String userid,                                                @PathVariable(value = "nickname") String nickname,                                                @PathVariable(value = "email") String email,                                                @PathVariable(value = "pw") String pw,                                                HttpServletRequest req  ,HttpServletResponse res) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.userModify(multipartFile,userid,nickname,email,pw,req,res);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 패스워드 확     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/memberOut/confirmPW/{userid}/{pw}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> confirmPW(@PathVariable(value = "userid") String userid,                                                 @PathVariable(value = "pw") String pw) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.confirmPW(userid,pw);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 회원 탈퇴     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/memberOut/{userid}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> memberOut(@PathVariable(value = "userid") String userid) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.memberOut(userid);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 게시물 관리     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/BoardMng/{userid}/{page}/{size}/{ty}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> BoardMng(@PathVariable(value = "userid") String userid,                                               @PathVariable(value = "page") int page,                                               @PathVariable(value = "size") int size,                                               @PathVariable(value = "ty") String ty) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.BoardMng(userid,page,size,ty);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 마일리지 관리     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/pointMng/{userid}/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> point(@PathVariable(value = "userid") String userid,                                               @PathVariable(value = "page") int page,                                               @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.pointMng(userid,page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 알림 내역     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/myinfo/notiList/{userid}/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> notiList(@PathVariable(value = "userid") String userid,                                            @PathVariable(value = "page") int page,                                            @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.notiList(userid,page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 관리자 지원     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/admin/req/{userid}/{name}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> adminReq(@PathVariable(value = "userid") String userid,                                               @PathVariable(value = "name") String name) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.adminReq(userid,name);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 지원현황 리플래시     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/admin/req/selectList/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> reqListRefresh(@PathVariable(value = "page") int page,                                               @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.reqListRefresh(page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 관리자페이지     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/admin/memberMng/selectList/{userid}/{nmType}/{progressTy}/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> selecMembertList(@PathVariable(value = "userid") String userid,                                                       @PathVariable(value = "nmType") String nmType,                                                       @PathVariable(value = "progressTy") String progressTy,                                                       @PathVariable(value = "page") int page,                                                       @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.selecMembertList(userid,nmType,progressTy,page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 관리자페이지     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/admin/memberMng/authCtl/{userid}/{ty}/{nm}/{msg}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> authCtl(@PathVariable(value = "userid") String userid,                                              @PathVariable(value = "ty") String ty,                                              @PathVariable(value = "nm") String nm,                                              @PathVariable(value = "msg") String msg) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.authCtl(userid,ty,nm,msg);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }    /**     * 관리자페이지     * @return     * @throws ItDaExceptionHandler     */    @CrossOrigin(origins = "*" ,allowedHeaders = "*")    @GetMapping(value = "/admin/boardMng/{userid}/{ty}/{flag}/{page}/{size}", produces = { MediaType.APPLICATION_JSON_VALUE })    public ResponseEntity<ItDaResult> boardAdminMng(@PathVariable(value = "userid") String userid,                                               @PathVariable(value = "ty") String ty,                                               @PathVariable(value = "flag") String flag,                                               @PathVariable(value = "page") int page,                                               @PathVariable(value = "size") int size) throws ItDaExceptionHandler {        ItDaResult result = new ItDaResult();        try{            result = myPageService.boardAdminMng(userid,ty,flag,page,size);            result.setResultMsg("SUCCESS");            result.setResultCode(201);        }catch (Exception e){            result.setResultCode(400);            result.setErrorCode(e.getMessage());            result.setResultMsg("fail Reason ::::: " + e.getMessage());        }        return new ResponseEntity<ItDaResult>(result, HttpStatus.CREATED);    }}