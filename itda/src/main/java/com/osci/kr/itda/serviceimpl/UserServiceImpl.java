package com.osci.kr.itda.serviceimpl;import com.osci.kr.itda.common.exception.ItDaExceptionHandler;import com.osci.kr.itda.common.model.ItDaResult;import com.osci.kr.itda.controller.UserController;import com.osci.kr.itda.domain.Mileage;import com.osci.kr.itda.domain.Role;import com.osci.kr.itda.entity.*;import com.osci.kr.itda.entity.sns.SocialMembers;import com.osci.kr.itda.jwt.JwtTokenProvider;import com.osci.kr.itda.repo.*;import com.osci.kr.itda.service.UserService;import com.osci.kr.itda.utills.CookieUtil;import com.osci.kr.itda.utills.MailSenderUtil;import com.osci.kr.itda.utills.RedisUtil;import lombok.AllArgsConstructor;import org.apache.commons.io.FileUtils;import org.apache.commons.io.FilenameUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpMethod;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.client.RestTemplate;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.time.LocalDateTime;import java.util.*;import java.util.concurrent.atomic.AtomicInteger;import java.util.stream.Stream;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;@Service@Transactional@AllArgsConstructorpublic class UserServiceImpl implements UserService {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    private MembersRepo membersRepo;    @Autowired    private InterestRopo interestRopo;    @Autowired    private MemberJoinLogRepo memberJoinLogRepo;    @Autowired    private MemberMngIDRepo memberMngIDRepo;    @Autowired    private LoginLogRepo loginLogRepo;    @Autowired    private PasswordEncoder passwordEncoder;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private final JwtTokenProvider jwtTokenProvider;    @Autowired    private RedisUtil redisUtil;    @Autowired    private CookieUtil cookieUtil;    @Autowired    private MailSenderUtil mailSenderUtil;    @Autowired    private SocialMemberRepo socialMemberRepo;    @Autowired    private RestTemplate restTemplate;    @Autowired    private BoardRepo boardRepo;    @Autowired    private ScrapRepo scrapRepo;    @Autowired    private NotiServiceImpl notiService;    @Autowired    private FileUploadRepo fileUploadRepo;    @Autowired    private MileageRepo mileageRepo;    @Autowired    private ElascitsearchServiceImple elascitsearchServiceImple;//    @Value("${kakao.logout.url}")//    private String kakaoLogouturl;    /**     * 로그인     * @param id     * @param pw     * @param req     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult signIn(String id , String pw , HttpServletRequest req, HttpServletResponse res) throws ItDaExceptionHandler, IOException {        //elascitsearchServiceImple.ElasticSearch();        Optional<Member> userEntityWrapper =  membersRepo.findByUserid(id);        return validateLogin(userEntityWrapper ,id ,pw ,req ,res);    }    /**     * 로그아웃 처리     * @param request     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult logout(HttpServletRequest request) throws ItDaExceptionHandler{        return logOutProcess(request);    }    /**     * 회원가입     * @param member     * @param req     * @throws ItDaExceptionHandler     */    public void signUpUser (Member member , HttpServletRequest req) throws ItDaExceptionHandler {        validateUser(member);        saveMember(member , req ,"home");    }    /**     * 회원가입 이메일 체크     * @param token     * @param email     * @return     * @throws ItDaExceptionHandler     */    public ItDaResult emailCheck(String token , String email ) throws ItDaExceptionHandler{        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        Optional<Member> e = membersRepo.findByEmail(email);        if(e.equals(Optional.empty())){            result.setResultMsg("FAIL, ID IS NOT FOUND");            result.setResultCode(404);            return result;        }        if(e.get().getEmailCheckToken().equals(token)){            e.get().add(linkTo(UserController.class).withSelfRel());            result.setResultData(true);            result.setResultMsg("SUCCESS");            if (e.isPresent()) {                e.get().setId(e.get().getId());                e.get().setEmailVerified("Y");                membersRepo.save(e.get());            }            if(!socialMemberRepo.findByUserid(e.get().getUserid()).equals(Optional.empty())){                Optional<SocialMembers> social = socialMemberRepo.findByUserid(e.get().getUserid());                if (social.isPresent()) {                    social.get().setUserid(e.get().getUserid());                    social.get().setAuthEmail("Y");                    socialMemberRepo.save(social.get());                }            }        }else{            result.setResultData(false);            result.setResultMsg("Email authentication tokens do not match! ");        }        return result;    }    /**     *  아이디 찾기     * @param email     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult findById(String email ) throws ItDaExceptionHandler, Exception {        ItDaResult result = new ItDaResult();        Optional<Member> e = membersRepo.findByEmail(email);        if(e.equals(Optional.empty())){            result.setResultMsg("FAIL, Email IS NOT FOUND");            result.setResultCode(404);            result.setErrorCode("noEmail");            return result;        }        Member userEntity = e.get();        mailSenderUtil.findByIdEmailSender(email,userEntity.getUserid());        return result;    }    /**     * 유저정보 가져오기     * @param id     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult getUserInfo(String id ) throws ItDaExceptionHandler, Exception {        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        Optional<Member> e = membersRepo.findByUserid(id);        //Optional<SocialMembers> s = socialMemberRepo.findByUserid(id);        if(e.equals(Optional.empty())){            result.setResultMsg("FAIL, ID IS NOT FOUND");            result.setResultCode(404);            result.setErrorCode("noID");            return result;        }        Member userEntity = e.get();       // SocialMembers sEntity = s.get();        map.put("member",userEntity);        result.setResultData(map);        return result;    }    /**     * 유저정보 가져오기     * @param id     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult getUserSummury(String id ) throws ItDaExceptionHandler, Exception {        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        Optional<Member> e = membersRepo.findByUserid(id);        if(e.equals(Optional.empty())){            result.setResultMsg("FAIL, ID IS NOT FOUND");            result.setResultCode(404);            result.setErrorCode("noID");            return result;        }        Member userEntity = e.get();        /**         * 구독중         */        List<Interest> inter = interestRopo.findByUseridAndComYn(id,"Y");        /**         * 최근작성게시물         */        List<Board> boards = boardRepo.findTop2ByUseridAndYnDelOrderByRegdateTimeDesc(id,"N");        /**         * 최근 게시물         */        List<Scrap> scraps = scrapRepo.findTop2ByUseridAndScrYnOrderByRegDateTimeDesc(id,"Y");        List<Board> setScrap = new ArrayList<>();        for(Scrap scrap : scraps){          Optional<Board> board =  boardRepo.findByNumAndYnDel(scrap.getBoardNum(),"N");          Board es = board.get();          setScrap.add(es);        }        List<com.osci.kr.itda.entity.Mileage> mileageslist = mileageRepo.findByUserid(id);        /**         * 마일리지 합계         */        AtomicInteger plusPoint = new AtomicInteger();        AtomicInteger minusPoint = new AtomicInteger();        mileageslist.forEach(point -> {            if(point.getPoint() > 0){                plusPoint.addAndGet(point.getPoint());            }else{                minusPoint.addAndGet(Math.abs(point.getPoint()));            }        });        /**         * 알림 정보 가져오기         */        ItDaResult no = notiService.selectAlarm(id);        HashMap notis = (HashMap) no.getResultData();        map.put("nickName",userEntity.getNickname());        map.put("point",Integer.parseInt(String.valueOf(plusPoint)) - Integer.parseInt(String.valueOf(minusPoint)));        map.put("gudoks",inter);        map.put("boards",boards);        map.put("scraps",setScrap);        map.put("CNT_ALARM", notis.get("CNT_ALARM"));        map.put("LIST_ALARM", notis.get("LIST_ALARM"));        result.setResultData(map);        return result;    }    /**     *  프로필 이미지 업로드     * @param file     * @param userid     * @param req     * @param res     * @return     * @throws ItDaExceptionHandler     * @throws Exception     */    public ItDaResult fileupload(MultipartFile file , String userid , HttpServletRequest req , HttpServletResponse res) throws ItDaExceptionHandler, Exception{        return uploaded(file, userid , req , res);    }    private ItDaResult uploaded(MultipartFile file , String userid , HttpServletRequest req , HttpServletResponse res) throws Exception {        logger.info("### upload");        ItDaResult ressult = new ItDaResult();        Calendar cal = Calendar.getInstance();       Optional<Member> mem = membersRepo.findByUserid(userid);        Member entity = mem.get();        String extension = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."), file.getOriginalFilename().length());        UUID uuid = UUID.randomUUID();        String newFileName = uuid.toString() + extension;        File targetFile = new File("/Users/jhpark/dev/itda/src/main/resources/static/image/" + entity.getUserid() + "/" + newFileName);        try {            InputStream fileStream = file.getInputStream();            FileUtils.copyInputStreamToFile(fileStream, targetFile);            file.transferTo(targetFile);            ressult.setResultData(saveFile(file ,userid ,req ,entity, targetFile.getAbsolutePath().toString() , newFileName));        } catch (IOException e) {            FileUtils.deleteQuietly(targetFile);            e.printStackTrace();        }        return ressult;    }    private FileUpload saveFile(MultipartFile file , String userid, HttpServletRequest req,Member member , String path,String newFileName) throws Exception {        LocalDateTime currentDateTime = LocalDateTime.now();        FileUpload upload = FileUpload.builder()                .filename(newFileName)                .originname(file.getOriginalFilename())                .ext(FilenameUtils.getExtension(file.getOriginalFilename()))                .filesize(file.getSize())                .regdateTime(currentDateTime)                .memid(member.getId())                .num(Long.parseLong("999999"))                .regiIp(req.getRemoteAddr())                .userid(member.getUserid())                .title("profile")                .filePath(path)                .build();        fileUploadRepo.save(upload);        return upload;    }    public ItDaResult changePw(String id, String pw , HttpServletRequest req ) throws ItDaExceptionHandler, Exception {        ItDaResult result = new ItDaResult();        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();        Optional<Member> e = membersRepo.findByUserid(id);        if(e.equals(Optional.empty())){            result.setResultMsg("FAIL, ID IS NOT FOUND");            result.setResultCode(404);            result.setErrorCode("noId");            return result;        }        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setPassword(passwordEncoder.encode(pw));            e.get().setLastlogin(currentDateTime);            e.get().setLastloginIp(req.getRemoteAddr());            membersRepo.save(e.get());        }        return result;    }    public HashMap jwtManagerFunction(String id ,Member userEntity ,HttpServletResponse res){        HashMap map = new HashMap();        String jwtToken = jwtTokenProvider.generateToken(id, userEntity.getRoles());        String jwtRefreshToken = jwtTokenProvider.generteRefreshToken(id, userEntity.getRoles());        //Cookie accessToken = cookieUtil.createCookie(JwtTokenProvider.ACCESS_TOKEN_NAME, jwtToken);        //Cookie refreshToken = cookieUtil.createCookie(JwtTokenProvider.REFRESH_TOKEN_NAME, jwtRefreshToken);        redisUtil.setDataExpire(jwtRefreshToken, id, JwtTokenProvider.REFRESH_TOKEN_VALIDATION_SECOND);        //res.addCookie(accessToken);        //res.addCookie(refreshToken);        res.setHeader(JwtTokenProvider.ACCESS_TOKEN_NAME,jwtToken);        res.setHeader(JwtTokenProvider.REFRESH_TOKEN_NAME,jwtRefreshToken);        map.put(JwtTokenProvider.ACCESS_TOKEN_NAME,jwtToken);        map.put(JwtTokenProvider.REFRESH_TOKEN_NAME,jwtRefreshToken);        return map;    }    public void updateById(Long mbrid, Member member, HttpServletRequest req) {        Optional<Member> e = membersRepo.findById(mbrid);        LocalDateTime currentDateTime = LocalDateTime.now();        if (e.isPresent()) {            e.get().setId(member.getId());            e.get().setEmail(member.getEmail());            e.get().setPassword(member.getPassword());            e.get().setLastlogin(currentDateTime);            e.get().setLastloginIp(req.getRemoteAddr());            membersRepo.save(member);        }    }    public void insertLoginLog(Member member , HttpServletRequest req ,boolean bl){        LocalDateTime currentDateTime = LocalDateTime.now();        LoginLog log = new LoginLog();        if(bl){            log.setMemid(member.getId());            log.setUserid(member.getUserid());            log.setLoginIp(req.getRemoteAddr());            log.setLoginSucess(0);            log.setLoginDatetime(currentDateTime);            log.setLoginReason("Success");            loginLogRepo.save(log);        }else{            log.setMemid(member.getId());            log.setUserid(member.getUserid());            log.setLoginIp(req.getRemoteAddr());            log.setLoginSucess(1);            log.setLoginDatetime(currentDateTime);            log.setLoginReason("ID IS NOT FOUND");            loginLogRepo.save(log);        }    }    private void validateUser(Member member){        if(!membersRepo.findByUserid(member.getUserid()).equals(Optional.empty())){            throw new IllegalArgumentException("userid");        }        if(!membersRepo.findByEmail(member.getEmail()).equals(Optional.empty())){            throw new IllegalArgumentException("email");        }        if(!membersRepo.findByNickname(member.getNickname()).equals(Optional.empty())          || !socialMemberRepo.findByNickname(member.getNickname()).equals(Optional.empty())  ){            throw new IllegalArgumentException("nickname");        }//        Optional<Member> userEntityWrapper =  membersRepo.findByUserid(member.getUserid());//        Member userEntity = userEntityWrapper.get();//        if(userEntity.getEmailVerified() == null || !userEntity.getEmailVerified().equals("Y")){//            throw new IllegalArgumentException("notemailauth");//        }    }    private void sinUpEmailSenderAuth(Member member , String token ,HttpServletRequest req){        try{            mailSenderUtil.sinUpEmailSender(member ,token,req);        }catch (Exception e){            throw new IllegalArgumentException("Auth : Mail Send Fail." + e.getMessage());        }    }    private ItDaResult validateLogin(Optional<Member> userEntityWrapper, String id , String pw ,HttpServletRequest req ,HttpServletResponse res){        ItDaResult result = new ItDaResult();        HashMap map = new HashMap();        if(userEntityWrapper.equals(Optional.empty())){            result.setResultMsg("FAIL, ID IS NOT FOUND");            result.setResultCode(400);            result.setErrorCode("nouserid");            return result;        }        if(memberMngIDRepo.findByUserid(id).get().getStatus()  != 0){            result.setResultMsg("FAIL, ID IS outOfMember");            result.setResultCode(400);            result.setErrorCode("outOfMember");            return result;        }        Member userEntity = userEntityWrapper.get();        if(userEntity.getUserid().equals(id) && passwordEncoder.matches(pw,userEntity.getPassword()) ){            userEntity.add(linkTo(UserController.class).withSelfRel());            /**             * 로그인 정보 업데이트             */            updateById(userEntity.getId(),userEntity,req);            /**             * jwt Token 관리             */            HashMap tokenMap = jwtManagerFunction(userEntity.getUserid(),userEntity,res);            /**             * 로그인 로그 기록             */            insertLoginLog(userEntity,req,true);            /**             * 알림             */            if( userEntity.getEmailVerified() == null || userEntity.getEmailVerified().equals("")){                notiService.SaveNotiEmail(userEntity);            }            map.put("userid",userEntity.getUserid());            map.put("email",userEntity.getEmail());            map.put("token",tokenMap);            map.put("authEmail",userEntity.getEmailVerified() == null ? false : true);            result.setResultMsg("SUCCESS");            result.setResultData(map);        }else{            result.setResultMsg("NOT FOUND");            result.setErrorCode("notpassword");            result.setResultCode(400);            insertLoginLog(userEntity,req,false);        }        return result;    }    public void saveMember(Member member ,HttpServletRequest req,String Type){        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();        com.osci.kr.itda.domain.Mileage mileag = Mileage.join;        Member mem = Member.builder()                .mem_userid(member.getUserid())                .mem_email(member.getEmail())                .mem_password(passwordEncoder.encode(member.getPassword()))                .roles(Collections.singletonList(Role.MEMBER.getValue()))                .registerIp(req.getRemoteAddr())                .ynAgree(member.getYnAgree())                .nickname(member.getNickname())                .point(mileag.getValue())                .emailCheckToken(UUID.randomUUID().toString())                .build();        membersRepo.save(mem);        /**         * 가입 로그 저장         */        LocalDateTime currentDateTime = LocalDateTime.now();        MemberJoinLog joinLog = MemberJoinLog.builder()                .userid(member.getUserid())                .mrgIp(req.getRemoteAddr())                .mrgDatetime(currentDateTime)                .mrgJoinTy(0)                .mrguserAgent((String)req.getHeader("user-agent"))                .mrgRecommendmemid(member.getId())                .build();        memberJoinLogRepo.save(joinLog);        /**         * 아이디 관리 : status : 회원 :0 , 탈퇴회원 :1 , 휴면회원 : 2         */        MemberManageID mngID = MemberManageID.builder()                .userid(member.getUserid())                .status(0)                .build();        memberMngIDRepo.save(mngID);        /**         * 회원가입 인증 메일  SNS 회원가입일때 이메일 인증 안함         */        if(!"SNS".equals(Type)){            sinUpEmailSenderAuth(member,mem.getEmailCheckToken(),req);        }        com.osci.kr.itda.entity.Mileage mlg = com.osci.kr.itda.entity.Mileage.builder()                .userid(member.getUserid())                .mlgRefer("환영합니다.")                .mlgCode("join")                .mlgType("신규가입")                .point(mileag.getValue())                .mlgKind("적립")                .regDateTime(currentDateTime)                .build();        mileageRepo.save(mlg);    }    /**     * 로그아웃 메소드     * @param request     * @return     */    private ItDaResult logOutProcess (HttpServletRequest request){        HttpSession session = request.getSession(false);        SecurityContextHolder.clearContext();        ItDaResult result = new ItDaResult();        String  accessToken = request.getHeader(JwtTokenProvider.ACCESS_TOKEN_NAME);        String  refreshToken = request.getHeader(JwtTokenProvider.REFRESH_TOKEN_NAME);        try{            if(accessToken != null && refreshToken != null) {                String acessjwt = accessToken;                String refreshjwt = refreshToken;                //String userID = jwtTokenProvider.getClaimsUserId(jwt);                try {                    if (redisUtil.getData(refreshjwt) != null) {                        //delete refresh token                        redisUtil.deleteData(refreshjwt);                    }                } catch (IllegalArgumentException e) {                    logger.warn("user does not exist");                }                redisUtil.setLogoutData(acessjwt);            }            //kakaoLogout("DSfsdfsdf");        }catch (Exception e){            e.printStackTrace();            result.setResultCode(400);            result.setResultMsg("Logout Fail ==== " + e.getMessage());        }        try{            session = request.getSession(false);            if(session != null) {                session.invalidate();            }            if(request.getCookies() != null){                for(Cookie cookie : request.getCookies()) {                    cookie.setMaxAge(0);                }            }            result.setResultMsg("SUCCESS");        }catch (Exception e){            result.setResultCode(400);            result.setResultMsg("Logout Fail ==== " + e.getMessage());        }        return result;    }    private void kakaoLogout(String accessToken) throws Exception{        HttpHeaders headers = new HttpHeaders();        headers.add("Authorization", "Bearer " + "meETwoARAPMcoZ5-mxYYYuwrjnlRDK8BRLlTygo9dZsAAAF3Zs0K0Q");        org.springframework.http.HttpEntity<String> request = new HttpEntity<>(headers);        String url = "https://kapi.kakao.com/v1/user/logout";        /**         * kakao logout  rest Call         */        try {            ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);            if(response.getStatusCodeValue() == 200) {                return;            }        }catch (Exception e) {            e.getMessage();        }    }}