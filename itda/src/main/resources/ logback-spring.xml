<?xml version="1.0" encoding="UTF-8"?><configuration scan="true" scanPeriod="60 seconds">    <springProfile name="local">        <property resource="application-local.properties"/>    </springProfile>    <springProfile name="dev">        <property resource="application-dev.properties"/>    </springProfile>    <springProfile name="live">        <property resource="application-live.properties"/>    </springProfile>    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>    <!-- log file path -->    <property name="LOG_PATH" value="${log.config.path}"/>    <!-- log file name -->    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>    <!-- err log file name -->    <property name="ERR_LOG_FILE_NAME" value="err_log"/>    <!-- pattern -->    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>    <!-- Console Appender -->    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <pattern>${LOG_PATTERN}</pattern>        </encoder>    </appender>    <!-- File Appender -->    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">        <!-- 파일경로 설정 -->        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>        <!-- 출력패턴 설정-->        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <pattern>${LOG_PATTERN}</pattern>        </encoder>        <!-- Rolling 정책 -->        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                <!-- 파일당 최고 용량 kb, mb, gb -->                <maxFileSize>10MB</maxFileSize>            </timeBasedFileNamingAndTriggeringPolicy>            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->            <maxHistory>30</maxHistory>            <!--<MinIndex>1</MinIndex> <MaxIndex>10</MaxIndex>-->        </rollingPolicy>    </appender>    <!-- 에러의 경우 파일에 로그 처리 -->    <appender name="Error" class="ch.qos.logback.core.rolling.RollingFileAppender">        <filter class="ch.qos.logback.classic.filter.LevelFilter">            <level>error</level>            <onMatch>ACCEPT</onMatch>            <onMismatch>DENY</onMismatch>        </filter>        <file>${LOG_PATH}/${ERR_LOG_FILE_NAME}.log</file>        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <pattern>${LOG_PATTERN}</pattern> </encoder>        <!-- Rolling 정책 -->        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->            <fileNamePattern>${LOG_PATH}/${ERR_LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                <!-- 파일당 최고 용량 kb, mb, gb -->                <maxFileSize>10MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy>            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->            <maxHistory>60</maxHistory>        </rollingPolicy>    </appender>    <!-- root레벨 설정 -->    <root level="${LOG_LEVEL}">        <appender-ref ref="CONSOLE"/>        <appender-ref ref="FILE"/>        <appender-ref ref="Error"/>    </root>    <!-- 특정패키지 로깅레벨 설정 -->    <logger name="com.osci.kr.itda" level="DEBUG" additivity="false">        <appender-ref ref="CONSOLE"/>        <appender-ref ref="FILE"/>        <appender-ref ref="Error"/>    </logger>    <!--appender는 출력을 담달하는데 정의에 따라서 통신, 이메일 파일출력등이 가능- https://hongkyu.tistory.com/76 -->    <!--Tcp 통신하는 것 같고, 공식문서를 보니 비동기라고 함! -->    <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">        <!-- 목적지로 쏴줄 것임. 값은 K8S 외부 주입때문에 저러함. host:port로 설정하길-->        <destination>192.168.0.55:5044</destination>        <!-- ES가 알아먹도록 JSON 형태로 인코딩까지 해주고-->        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">            <providers>                <mdc />                <pattern>                    <!-- 아래와 같은 키밸류 타입이 들어가면서 나중에 키바나에서 찾기 수월함-->                    <pattern>serviceID:YrbiService</pattern>                </pattern>                <timestamp />                <!--<version />-->                <context />                <threadName />                <logLevel />                <message />                <loggerName />                <logstashMarkers />                <stackTrace />                <callerData />            </providers>        </encoder>    </appender>    <!-- 다른 불필요 설정 생략~~~ -->    <!--kr.co.lsoft 는 패키지명 해당 패키지는 TRACE 레벨 이상이면, CONSOLE과 LOGSTASH 설정을 참고함. -->    <logger name="com.osci.kr.itda" level="TRACE" additivity="false">        <appender-ref ref="CONSOLE" />        <appender-ref ref="LOGSTASH" />    </logger></configuration>